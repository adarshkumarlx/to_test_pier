<?xml version="1.0" encoding="utf-8"?>
<Sequence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Root xsi:type="GroupNode">
    <Children>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Set time from server</Name>
            <Params>
              <Param Name="Error Code" Value="12000103" />
            </Params>
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs />
            <WorkingDirectory />
            <FileName>.\local_collateral\Set_Time.bat</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("The command completed successfully"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Time sync</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>false</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References />
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="ProcessNode">
        <Children />
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Enable USB-RJ45 adapter</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>10000</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <AlwaysRun>false</AlwaysRun>
        <CmdLineArgs>enable "USB\VID_0BDA&amp;PID_8153"</CmdLineArgs>
        <WorkingDirectory />
        <FileName>.\remote_collateral\devcon.exe</FileName>
        <PreStepReferences>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </PreStepReferences>
        <EnablePreStepCode>false</EnablePreStepCode>
        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) are enabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
        <PostStepReferences>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </PostStepReferences>
        <EnablePostStepCode>true</EnablePostStepCode>
      </Node>
      <Node xsi:type="ProcessNode">
        <Children />
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Enable USB-RJ45 adapter</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>10000</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <AlwaysRun>false</AlwaysRun>
        <CmdLineArgs>enable "USB\VID_0B95&amp;PID_7720"</CmdLineArgs>
        <WorkingDirectory />
        <FileName>.\remote_collateral\devcon.exe</FileName>
        <PreStepReferences>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </PreStepReferences>
        <EnablePreStepCode>false</EnablePreStepCode>
        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) are enabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
        <PostStepReferences>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </PostStepReferences>
        <EnablePostStepCode>true</EnablePostStepCode>
      </Node>
      <Node xsi:type="WaitNode">
        <Children />
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>5s</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>10000</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <Duration>5</Duration>
        <DurationType>Seconds</DurationType>
      </Node>
      <Node xsi:type="SfcQueryNode">
        <Children />
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>SfcQueryNode</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>false</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>true</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <ValidateParams />
        <PromptForSerial>true</PromptForSerial>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="PicturePrompt">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Boot Check</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>Insert AC pwoer adapter and Wait for Chrome Boot up!</Message>
            <Title>Confirmation</Title>
            <Picture>\.\local_collateral\Pictures\Bootup.jpg</Picture>
            <Font>25.8</Font>
            <Buttons>Yes, No</Buttons>
          </Node>
          <Node xsi:type="GroupNode">
            <Children>
              <Node xsi:type="SerialPortSearchNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Find Port</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>30000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <SearchBy>HardwareId</SearchBy>
                <HardwareId>FTDIBUS\COMPORT&amp;VID_0403&amp;PID_6010&amp;MI_01</HardwareId>
                <PollFrequencyMs>1000</PollFrequencyMs>
                <SetAsGlobalVariable>false</SetAsGlobalVariable>
                <GlobalVariableName>FoundPort</GlobalVariableName>
              </Node>
              <Node xsi:type="WaitNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Wait for boot</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>10000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <Duration>5</Duration>
                <DurationType>Seconds</DurationType>
              </Node>
              <Node xsi:type="SerialPortCommNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>EFI check</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>ShowAsDone</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>20000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <SearchBy>HardwareId</SearchBy>
                <HardwareId>FTDIBUS\COMPORT&amp;VID_0403&amp;PID_6010&amp;MI_01</HardwareId>
                <PollFrequencyMs>1000</PollFrequencyMs>
                <SetAsGlobalVariable>false</SetAsGlobalVariable>
                <GlobalVariableName>FoundPort</GlobalVariableName>
                <Baud>115200</Baud>
                <PortIndex>0</PortIndex>
                <WriteCommand>map -r</WriteCommand>
                <WriteNewLine>true</WriteNewLine>
                <LookForStrings>
                  <SParam Value="Shell" />
                </LookForStrings>
                <DtrEnabled>true</DtrEnabled>
                <RtsEnabled>true</RtsEnabled>
                <DumpOutput>true</DumpOutput>
              </Node>
            </Children>
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Test Group</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>false</CodeEnabled>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
            <GroupType>Serial</GroupType>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>EFI Boot Up Test Node (Run on Host PC)</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </References>
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="PicturePrompt">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Windows Boot Up node</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>按“YES”继续</Message>
            <Title>Confirmation</Title>
            <Picture>WindowsBootUp.PNG</Picture>
            <Font>35</Font>
            <Buttons>Yes, No</Buttons>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Windows Boot Up (Run on DUT)</Name>
        <Params />
        <Loops>5</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References />
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="CodeNode">
        <Children />
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>BLT Requirement</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>true</CodeEnabled>
        <AlwaysRun>false</AlwaysRun>
        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Xml.Linq;
using System.Xml;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;
using System.Diagnostics;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
        [DllImport("kernel32")]
        private static extern int GetPrivateProfileString(string section, string key, string defVal, StringBuilder retVal, int size, string filePath);
        [DllImport("kernel32")]
        private static extern long WritePrivateProfileString(string section, string key, string val, string filePath);
		
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			ExecutableNode eBLT = node.GetSibling("BLT Check") as ExecutableNode;
            eBLT.Enabled = true;
			string FullAA = node.GetRoot().GetGlobalRuntimeParam("PartNumber").ToUpper();
            string AA = FullAA.Substring(0,6);
            string BLT;
            string DeviceAddress;
            
            //flex server
            if (!Directory.Exists(@"X:\"))
            {
                msgRouter.DebugOutput("X: Drive not found or inaccessible");
                try
                {
                	System.Diagnostics.Process.Start("net", "use X: /d /y").WaitForExit();
                    System.Diagnostics.Process.Start("net", "use X: \\\\172.30.202.95\\d$ \"pic!2018\" /user:\"administrator\"").WaitForExit();
                    if (!Directory.Exists(@"X:\"))
                    {
                    	msgRouter.DebugOutput("Can't connect to test server");
                    	return PassFail.Fail;
                    }
                }
                catch
                {
                	return PassFail.Fail;
                }
                
            }
            if(!File.Exists(@"X:\Irontester\BLT_XML_Config\AA_BLT_Matrix.xml"))
                {
                    msgRouter.DebugOutput("AA_BLT_Matrix.xml does not EXIST!");
                    return PassFail.Fail;
                }
                
            XElement doc = XElement.Load(@"X:\Irontester\BLT_XML_Config\AA_BLT_Matrix.xml");  
            IEnumerable&lt;XElement&gt; product =  
                from el in doc.Elements("Product")  
                where (string)el.Attribute("AA").Value.ToUpper() == AA
                select el;  
            foreach (XElement el in product)
                if (el.Element("BLT").Value.ToUpper().Equals("YES"))
                {
                	msgRouter.DebugOutput("BLT content expected");
                	string WO = node.GetRoot().GetGlobalRuntimeParam("ProductionOrder");
                    string FileNameServer = @"X:\Irontester\BLT_Check_Result\BLT_Checked_"+FullAA+"_"+WO+".xml";
                    if(File.Exists(FileNameServer))
                    {
                    	msgRouter.DebugOutput("Work Order: " +WO+" verified earlier");
                    	eBLT.Enabled = false;
                        return PassFail.Pass;
                    } 
                	
                	DeviceAddress=el.Element("DevAdd").Value.ToUpper();

                    string path = System.IO.Directory.GetCurrentDirectory() + "\\local_collateral\\blt\\BLTFRU.ini";
                    if(!File.Exists(path))
                    {
                        msgRouter.DebugOutput("BLTFRU.ini does not EXIST!");
                        return PassFail.Fail;
                    }
			   
                    msgRouter.DebugOutput("AA part number to write into INI file: " + FullAA);
                    WritePrivateProfileString("BLTFRU","Assembly_No", FullAA, path);
			
                    msgRouter.DebugOutput("Device Address to write into INI file: " + DeviceAddress);
                    WritePrivateProfileString("BLTFRU","Device_Address", DeviceAddress, path);
                	return PassFail.Pass;
                }
                else if (el.Element("BLT").Value.ToUpper().Equals("NO"))
                {
                	msgRouter.DebugOutput("BLT not required..Disabling BLT Check Node");
                	eBLT.Enabled = false;
                    return PassFail.Pass;
                }
                else
                {
                	msgRouter.DebugOutput("Invalid element!! (valid - YES or NO only)");
                    return PassFail.Fail;
                }
			msgRouter.DebugOutput("AA number not found in AA_BLT_Matrix.xml!!");
			return PassFail.Fail;
		}
			
	}
}
</Code>
        <References>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </References>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="OkCancelPromptNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Plug in Aardvark I2C to DUT - Both USB and PPV connector </Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>Plug in Aardvark I2C to DUT - Both USB and PPV connector </Message>
            <Title>BLT Verify</Title>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>12000105 BLT verify</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>mode=2 command=read filename=$(FILENAME) serialno=$(SERIAL_NUMBER)</CmdLineArgs>
            <WorkingDirectory>.\local_collateral\blt\</WorkingDirectory>
            <FileName>.\local_collateral\blt\BLTFRU_read.exe</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
using System.Xml.Linq;
using System.Xml;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("BLT FRU DATA WRITE PASSED"))
				{
                    string SN = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("SerialNumber");
                    string AA = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PartNumber");
                    string WO = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("ProductionOrder");
                    //flex server
                    string FileNameServer = @"X:\Irontester\BLT_Check_Result\BLT_Checked_"+AA+"_"+WO+".xml";
                    if (!File.Exists(FileNameServer))
                    {
                        XDocument doc = new XDocument(new XElement("Verified",  
                        new XElement("SN", SN)  
                        )); 
                        doc.Save(FileNameServer, SaveOptions.None);
                    }
                    else
                    {
                        XDocument doc = XDocument.Load(FileNameServer);
                        doc.Elements("Verified").First().Add(new XElement("SN", SN));
                        doc.Save(FileNameServer, SaveOptions.None);
                    }
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
          <Node xsi:type="OkCancelPromptNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Remove Aardvark I2C from DUT</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Continue</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>Remove Aardvark I2C from DUT, then plug in test collateral to USB port</Message>
            <Title>BLT Verify</Title>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>BLT Check</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>10000</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Xml.Linq;
using System.Xml;
using System.Runtime.InteropServices;
using System.Text;
using System.IO;
using System.Diagnostics;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		
		[DllImport("kernel32")]
        private static extern int GetPrivateProfileString(string section, string key, string defVal, StringBuilder retVal, int size, string filePath);
        [DllImport("kernel32")]
        private static extern long WritePrivateProfileString(string section, string key, string val, string filePath);
		
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
            string FullAA = node.GetRoot().GetGlobalRuntimeParam("PartNumber").ToUpper();
            string AA = FullAA.Substring(0,6);
            string BLT;
            string DeviceAddress;
            
            //flex server
            if (!Directory.Exists(@"X:\"))
            {
                msgRouter.DebugOutput("X: Drive not found or inaccessible");
                try
                {
                	System.Diagnostics.Process.Start("net", "use X: /d /y").WaitForExit();
                    System.Diagnostics.Process.Start("net", "use X: \\\\172.30.202.95\\ipc$ pic!2018 /user:administrator").WaitForExit();
                    if (!Directory.Exists(@"X:\"))
                    {
                    	msgRouter.DebugOutput("Can't connect to test server");
                    	return GroupNodePreStepStatus.BypassGroupAndFail;
                    }
                }
                catch
                {
                	return GroupNodePreStepStatus.BypassGroupAndFail;
                }
                
            }
            if(!File.Exists(@"X:\Irontester\BLT_XML_Config\AA_BLT_Matrix.xml"))
                {
                    msgRouter.DebugOutput("AA_BLT_Matrix.xml does not EXIST!");
                    return GroupNodePreStepStatus.BypassGroupAndFail;
                }
                
            XElement doc = XElement.Load(@"X:\Irontester\BLT_XML_Config\AA_BLT_Matrix.xml");  
            IEnumerable&lt;XElement&gt; product =  
                from el in doc.Elements("Product")  
                where (string)el.Attribute("AA").Value.ToUpper() == AA
                select el;  
            foreach (XElement el in product)
                if (el.Element("BLT").Value.ToUpper().Equals("YES"))
                {
                	msgRouter.DebugOutput("BLT content expected");
                	                	string WO = node.GetRoot().GetGlobalRuntimeParam("ProductionOrder");
                    string FileNameServer = @"X:\Irontester\BLT_Check_Result\BLT_Checked_"+FullAA+"_"+WO+".xml";
                    if(File.Exists(FileNameServer))
                    {
                    	msgRouter.DebugOutput("Work Order: " +WO+" verified earlier");
                        return GroupNodePreStepStatus.BypassGroupAndDone;
                    } 
                	DeviceAddress=el.Element("DevAdd").Value.ToUpper();
                	
                    string path = System.IO.Directory.GetCurrentDirectory() + "\\local_collateral\\blt\\BLTFRU.ini";
                    if(!File.Exists(path))
                    {
                        msgRouter.DebugOutput("BLTFRU.ini does not EXIST!");
                        return GroupNodePreStepStatus.BypassGroupAndFail;
                    }
			   
                    msgRouter.DebugOutput("AA part number to write into INI file: " + FullAA);
                    WritePrivateProfileString("BLTFRU","Assembly_No", FullAA, path);
			
                    msgRouter.DebugOutput("Device Address to write into INI file: " + DeviceAddress);
                    WritePrivateProfileString("BLTFRU","Device_Address", DeviceAddress, path);
                	return GroupNodePreStepStatus.RunGroup;
                }
                else if (el.Element("BLT").Value.ToUpper().Equals("NO"))
                {
                	msgRouter.DebugOutput("BLT not required");
                	return GroupNodePreStepStatus.BypassGroupAndDone;
                }
                else
                {
                	msgRouter.DebugOutput("Invalid element!! (valid - YES or No only)");
                    return GroupNodePreStepStatus.BypassGroupAndFail;
                }
			msgRouter.DebugOutput("AA number not found in AA_BLT_Matrix.xml!!");
			return GroupNodePreStepStatus.BypassGroupAndFail;
		}
	}
}
</Code>
        <References>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </References>
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="DataInputNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Scan MAC Label</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>Input data</Message>
            <Title>Data</Title>
            <StoreParameter>MAC address</StoreParameter>
          </Node>
          <Node xsi:type="CodeNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Get MAC from SFC(need online test)</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>true</CodeEnabled>
            <AlwaysRun>false</AlwaysRun>
            <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			string sfc_mac = node.GetRoot().GetGlobalRuntimeParam("MAC address");
             int count = sfc_mac.Length;
             for(int index = 2; index &lt;count; index+=3)
             {
             	sfc_mac= sfc_mac.Insert(index,":");
             }	
     
             msgRouter.DebugOutput(sfc_mac);
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>08100202 Check MAC</Name>
            <Params>
              <Param Name="ErrorCode" Value="08100202" />
            </Params>
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>-ExecutionPolicy ByPass -File "local_collateral\GetAllMac.PS1"</CmdLineArgs>
            <WorkingDirectory />
            <FileName>powershell.exe</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>MAC Verify</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>false</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References />
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="PicturePrompt">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>PicturePrompt</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <Message>Cypress connect to J9B1？</Message>
            <Title>Confirmation</Title>
            <Picture>Capture2.PNG</Picture>
            <Font>30</Font>
            <Buttons>Yes, No</Buttons>
          </Node>
          <Node xsi:type="CodeNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Set Hex filepath</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>true</CodeEnabled>
            <AlwaysRun>false</AlwaysRun>
            <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//string AA = node.GetRoot().GetGlobalRuntimeParam("PRODUCTCODE").Substring(0,6);
			string dir = Directory.GetCurrentDirectory();
			string dirPath = dir + "\\local_collateral\\CYPDVerify\\firmware";
			msgRouter.DebugOutput("Directory: " + dirPath);
			
			if (!Directory.Exists(dirPath))
			{
				msgRouter.ErrorOutput("Error!! Directory not exist: " + dirPath);
				return PassFail.Fail;
			}
			
			string [] hexFiles = Directory.GetFiles(dirPath, "*.hex"); 
			if(hexFiles.Length != 1)
			{
				msgRouter.ErrorOutput("Error!! " + hexFiles.Length.ToString() +" Hex file in "+ dirPath);
				return PassFail.Fail;
			}
			
			node.GetRoot().SetGlobal("PDHex", hexFiles[0]);
			msgRouter.DebugOutput(node.GetRoot().GetGlobal("PDHex"));

			return PassFail.Pass;
		}
	}
}
</Code>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Verify Cypress PD</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>100000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>filepath="$(PDHex)"</CmdLineArgs>
            <WorkingDirectory />
            <FileName>.\local_collateral\CYPDVerify\CYPDVerify.exe</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("PDHex", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Succeeded!"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Verify Cypress PD</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>false</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References>
          <AsmRef>
            <Asm>Intel.IronTester2.Framework.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.Plugins.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
            <Gac>false</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>mscorlib.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Data.DataSetExtensions.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Core.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
          <AsmRef>
            <Asm>System.Xml.Linq.dll</Asm>
            <Gac>true</Gac>
          </AsmRef>
        </References>
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Enable USB-RJ45 adapter</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>enable "USB\VID_0BDA&amp;PID_8153"</CmdLineArgs>
            <WorkingDirectory />
            <FileName>.\remote_collateral\devcon.exe</FileName>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) are enabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
          <Node xsi:type="WaitNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>5s</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <Duration>5</Duration>
            <DurationType>Seconds</DurationType>
          </Node>
          <Node xsi:type="SfcQueryNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>SfcQueryNode</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <ValidateParams />
            <PromptForSerial>true</PromptForSerial>
          </Node>
          <Node xsi:type="GroupNode">
            <Children>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Disable USB-RJ45 Adapter</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>20000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>disable "USB\VID_0BDA&amp;PID_8153"</CmdLineArgs>
                <WorkingDirectory />
                <FileName>.\remote_collateral\devcon.exe</FileName>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) disabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="OkCancelPromptNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>PromptOkCancelNode</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <Message>Remove the USB-RJ45 from adapter</Message>
                <Title>Question</Title>
              </Node>
              <Node xsi:type="OkCancelPromptNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>PromptOkCancelNode</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <Message>Connect Ethernet cable to RJ45 connector on board</Message>
                <Title>Question</Title>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>MAC PROGRAMMING</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100202" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>/nic=1 /mac=$(MAC1)</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\EEUPDATE\EEUPDATEW64e.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>MAC Programming</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Disable onboard RJ45 Adapter</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>30000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>disable "PCI\VEN_8086&amp;DEV_57B4&amp;SUBSYS_00008086"</CmdLineArgs>
                <WorkingDirectory />
                <FileName>.\remote_collateral\devcon.exe</FileName>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) disabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="WaitNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>5s</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>10000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <Duration>5</Duration>
                <DurationType>Seconds</DurationType>
              </Node>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Enable onboard RJ45 adapter</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>50000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>enable "PCI\VEN_8086&amp;DEV_57B4&amp;SUBSYS_00008086"</CmdLineArgs>
                <WorkingDirectory />
                <FileName>.\remote_collateral\devcon.exe</FileName>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) are enabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>ResetXScannerVariable</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			try{
			    //node.GetRoot().SetGlobal("SERIAL_NUMBER", "fakeserial_sfc");
                node.GetRoot().SetGlobalRuntimeParam("XSERIAL_NUMBER_SCANNER", "fakeserial_scanner");
                return PassFail.Pass;
			}
			catch(Exception e)
			{
				msgRouter.DebugOutput(e.Message.ToString());
				return PassFail.Fail;
			}
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="DataInputNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Scan Board Serial Number</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Scan Serial Number</Message>
                    <Title>Data</Title>
                    <StoreParameter>XSERIAL_NUMBER_SCANNER</StoreParameter>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>CheckBoardSerialWMICvsSFC</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{			
			try{
                string sfc_SN = node.GetRoot().GetGlobal("SERIAL_NUMBER").ToUpper().Trim();
							
				msgRouter.DebugOutput("Checking SFC Board Serial number (SERIAL_NUMBER variable) with WMI");
                // Create a management object searcher
                ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT SerialNumber FROM Win32_BIOS");
                // Execute the query and get the collection of WMI objects
                ManagementObjectCollection objects = searcher.Get();
                // Iterate through the collection to get the BIOS serial number
                foreach (ManagementObject obj in objects)
                {
                    msgRouter.DebugOutput("BIOS Serial Number: " + obj["SerialNumber"]);
                    string wmi_SN = obj["SerialNumber"].ToString().ToUpper().Trim();
                    
                    msgRouter.DebugOutput("Comparing SFC SN " + sfc_SN + " to WMIC SN" + wmi_SN);
                    
                    if (sfc_SN == wmi_SN)
                    {
                    	return PassFail.Pass;
                    }
                }
            }
            catch(Exception e)
            {
                msgRouter.DebugOutput(e.Message);
                return PassFail.Fail;
            }

			return PassFail.Fail;
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Management.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>CheckBoardSerialWMICvsLabel</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{			
			try{
                string lbl_SN = node.GetRoot().GetGlobalRuntimeParam("XSERIAL_NUMBER_SCANNER").ToUpper().Trim();
				
							
				msgRouter.DebugOutput("Checking Label Board Serial number (XSERIAL_NUMBER_LABEL variable) with WMI");
                // Create a management object searcher
                ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT SerialNumber FROM Win32_BIOS");
                // Execute the query and get the collection of WMI objects
                ManagementObjectCollection objects = searcher.Get();
                // Iterate through the collection to get the BIOS serial number
                foreach (ManagementObject obj in objects)
                {
                    msgRouter.DebugOutput("BIOS Serial Number: " + obj["SerialNumber"]);
                    string wmi_SN = obj["SerialNumber"].ToString().ToUpper().Trim();
                    
                    msgRouter.DebugOutput("Comparing LABEL SN " + lbl_SN + " to WMIC SN" + wmi_SN);
                    
                    if (lbl_SN == wmi_SN)
                    {
                    	return PassFail.Pass;
                    }
                }
            }
            catch(Exception e)
            {
                msgRouter.DebugOutput(e.Message);
                return PassFail.Fail;
            }

			return PassFail.Fail;
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Management.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Board SN Label Verify</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="DataInputNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Scan MAC Label</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Scan MAC address</Message>
                    <Title>Data</Title>
                    <StoreParameter>MAC address</StoreParameter>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Get MAC from SFC(need online test)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			string sfc_mac = node.GetRoot().GetGlobalRuntimeParam("MAC address");
             int count = sfc_mac.Length;
             for(int index = 2; index &lt;count; index+=3)
             {
             	sfc_mac= sfc_mac.Insert(index,":");
             }	
     
             msgRouter.DebugOutput(sfc_mac);
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08100202 Check MAC</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100202" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-ExecutionPolicy ByPass -File "local_collateral\GetAllMac.PS1"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08100301 Lan Speed Check</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100301" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Continue</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>/c powershell -Command "Get-NetAdapter | Select-Object InterfaceDescription, Name, LinkSpeed"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>C:\\Windows\System32\cmd.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
    public class PostTestStep : IPostProcessStep
    {
        public PostProcessStatus Invoke(IProcessNode node, IProcessMsgRouter msgRouter)
        {
            // Define the specific adapter string to check
            string requiredAdapter = "Intel(R) Ethernet Connection (25) I219-V Ethernet                     1 Gbps   ";
            // Flag to track if the required adapter is found
            bool isAdapterDetected = false;
            // Iterate through the standard output messages
            foreach (string s in node.GetStdOutMsgs())
            {
                // Check if the required adapter is present in the output
                if (s.Contains(requiredAdapter))
                {
                    isAdapterDetected = true;
                    break; // Exit the loop as we found the required adapter
                }
            }
            // If the adapter is detected, return ProcessPass; otherwise, return ProcessFail
            if (isAdapterDetected)
            {
                return PostProcessStatus.ProcessPass;
            }
            else
            {
                return PostProcessStatus.ProcessFail;
            }
        }
    }
} </PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08100301 Lan Speed Check-Get-WmiObj</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01004203" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Get-WmiObject -Class Win32_NetworkAdapter | Select-Object Name, MACAddress, NetConnectionID, PNPDeviceID, Speed</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;

			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Name            : Intel(R) Ethernet Connection (25) I219-V    Ethernet ") || //update this
				   s.Contains("Speed           : 1000000000"))
				{
					count++;
					//msgRouter.DebugOutput(count.ToString());
				}
					
			}
			
			if (count&gt;1) return PostProcessStatus.ProcessPass; // update this as well
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>MAC Verify</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>MAC Format</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			string sfc_mac = node.GetRoot().GetGlobalRuntimeParam("MAC1");
             int count = sfc_mac.Length;
             for(int index = 2; index &lt;count; index+=3)
             {
             	sfc_mac= sfc_mac.Insert(index,":");
             }	
     
             msgRouter.DebugOutput(sfc_mac);
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Verify MAC</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100202" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-ExecutionPolicy ByPass -File "local_collateral\GetAllMac.PS1"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08100202 Check MAC</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100202" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-ExecutionPolicy ByPass -File "local_collateral\GetAllMac.PS1"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>MAC VERIFY</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
            </Children>
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>MAC address program and verify</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>false</CodeEnabled>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
            <GroupType>Serial</GroupType>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>MAC Programming</Name>
        <Params>
          <Param Name="SPK" Value="Speakers (2- Intel" />
          <Param Name="DMIC" Value="Microphone Array (Intel" />
          <Param Name="Accel" Value="Physical Accelerometer Sensor" />
          <Param Name="Gyro" Value="Gyrometer Sensor" />
          <Param Name="Mag" Value="Magnetometer Sensor" />
          <Param Name="SERIAL_NUMBER" Value="PKA631200004" />
          <Param Name="SUCCESS" Value="TRUE" />
          <Param Name="ITEM" Value="PUT_IPN_HERE" />
          <Param Name="PRODUCTNAME" Value="PUT PRODUCTNAME HERE" />
          <Param Name="BUILDNUMBER" Value="PUT BUILDNUMBER HERE" />
          <Param Name="0CPTD_IMEI_COYMTMB1" Value="004402521290167" />
          <Param Name="BIOS" Value="put_correct_file_here" />
          <Param Name="EP" Value="Telephone" />
          <Param Name="Orient" Value="Orientation Sensor" />
          <Param Name="BIOSVersion" Value="BIOSVersion: INTEL  - 0,SKLSE2R1.R00.B104.B97.1511230041,EDK II - 10000" />
          <Param Name="ECMajor" Value="EmbeddedControllerMajorVersion: 1" />
          <Param Name="ECMinor" Value="EmbeddedControllerMinorVersion: 30" />
          <Param Name="CPUStepping" Value="Caption: Intel64 Family 6 Model 138 Stepping 0" />
          <Param Name="CPUBrandName" Value="Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz" />
          <Param Name="CPUCoreCount" Value="NumberOfCores: 5" />
          <Param Name="CPUMaxSpeed" Value="MaxClockSpeed: 1997" />
          <Param Name="MemSize" Value="4294967296" />
          <Param Name="MemManufacturer" Value="Elpida" />
          <Param Name="MemSpeed" Value="1600" />
          <Param Name="MemDevices" Value="2" />
          <Param Name="MemFormFactor" Value="12" />
          <Param Name="MEID" Value="PCI\VEN_8086&amp;DEV_9D3A" />
          <Param Name="MEVersion" Value="11.0.0.1172" />
          <Param Name="BTUSBDevid" Value="USB\VID_8087&amp;PID_0A2A" />
          <Param Name="VOLUME" Value="0" />
          <Param Name="ssid" Value="DONTCONNECT" />
          <Param Name="passKey" Value="blahblah" />
          <Param Name="VideoMemory" Value="1073741824" />
          <Param Name="PCI_MAP" Value="cnl_sds_z0_pci.txt" />
          <Param Name="TSTCOM_LOC" Value="C:\tstcom " />
          <Param Name="Accel2" Value="Accelerometer Sensor" />
          <Param Name="Als" Value="Ambient Light Sensor" />
          <Param Name="Hall" Value="Hall Presence Sensor" />
          <Param Name="Sar" Value="Sar Sensor" />
          <Param Name="HEADSET" Value="Headphones" />
          <Param Name="LearnPCIEMap1" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98C6" />
          <Param Name="LearnPCIEMap2" Value="PCI_BUS_0:Intel(R) Management Engine Interface " />
          <Param Name="LearnPCIEMap3" Value="PCI_BUS_0:Intel(R) Serial IO UART Host Controller - 98A9" />
          <Param Name="LearnPCIEMap4" Value="PCI_BUS_0:Intel(R) Serial IO SPI Host Controller - 98AA" />
          <Param Name="LearnPCIEMap5" Value="PCI_BUS_0:Microsoft Basic Display Adapter" />
          <Param Name="LearnPCIEMap6" Value="PCI_BUS_0:Universal Flash Storage (UFS) Host Controller" />
          <Param Name="LearnPCIEMap7" Value="PCI_BUS_0:Intel(R) Management Engine Interface " />
          <Param Name="LearnPCIEMap8" Value="PCI_BUS_0:Intel(R) Dynamic Tuning Processor Participant" />
          <Param Name="LearnPCIEMap9" Value="PCI_BUS_0:PCI standard RAM Controller" />
          <Param Name="LearnPCIEMap10" Value="PCI_BUS_0:Intel(R) Smart Sound Technology (Intel(R) SST) Audio Controller" />
          <Param Name="LearnPCIEMap11" Value="PCI_BUS_0:USB Synopsys Controller" />
          <Param Name="LearnPCIEMap12" Value="PCI_BUS_0:PCI standard ISA bridge" />
          <Param Name="LearnPCIEMap13" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98C5" />
          <Param Name="LearnPCIEMap14" Value="PCI_BUS_0:PCI standard host CPU bridge" />
          <Param Name="LearnPCIEMap15" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98EB" />
          <Param Name="LearnPCIEMap16" Value="PCI_BUS_0:Intel(R) Integrated Sensor Solution" />
          <Param Name="LearnPCIEMap17" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98E8" />
          <Param Name="LearnPCIEMap18" Value="PCI_BUS_0:Intel(R) Serial IO UART Host Controller - 98A8" />
          <Param Name="LearnPCIEMap19" Value="PCI_BUS_0:SDA Standard Compliant SD Host Controller" />
          <Param Name="LearnPCIEMap20" Value="PCI_BUS_0:Intel(R) AVStream Camera" />
          <Param Name="LearnPCIEMap21" Value="PCI_BUS_0:Intel(R) USB 3.10 eXtensible Host Controller - 1.10 (Microsoft)" />
          <Param Name="LearnPCIEMap22" Value="PCI_BUS_0:PCI Simple Communications Controller" />
          <Param Name="LearnPCIEMap23" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98E9" />
          <Param Name="LearnPCIEMap24" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 98EA" />
          <Param Name="LearnPCIEMap25" Value="PCI_BUS_0:PCI-to-PCI Bridge" />
          <Param Name="LearnPCIEMap26" Value="PCI_BUS_0:PCI Device" />
          <Param Name="LearnPCIEMap27" Value="PCI_BUS_1:Intel(R) Wireless-AC 9260" />
          <Param Name="LearnPCIEMap28" Value="PCI_BUS_2:Intel(R) Wireless-AC 9260 #2" />
          <Param Name="LearnPCIEMap29" Value="PCI_BUS_2:Intel(R) Wireless-AC 9260 #2" />
          <Param Name="LearnPCIEMapCount" Value="27" />
          <Param Name="SFC_MAC" Value="" />
        </Params>
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>false</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>true</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References />
        <GroupType>Serial</GroupType>
      </Node>
      <Node xsi:type="GroupNode">
        <Children>
          <Node xsi:type="WaitNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>WaitGroup</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>7000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <Duration>2</Duration>
            <DurationType>Seconds</DurationType>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Read PSS SerialNumber </Name>
            <Params />
            <Loops>3</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>100000</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>/c wmic bios get serialnumber</CmdLineArgs>
            <WorkingDirectory />
            <FileName>C:\Windows\System32\cmd.exe</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Management.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            string SN = (node as ExecutableNode).GetRoot().GetGlobal("SERIAL_NUMBER").ToUpper().Trim();
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains(SN))
                {
                    return PostProcessStatus.ProcessPass;   
                }
            }
            msgRouter.DebugOutput("Expected Serial Number:" + SN + " Not Found!");
            return PostProcessStatus.ProcessFail;
            
        }
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>true</EnablePostStepCode>
          </Node>
          <Node xsi:type="CodeNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Check BKC Version</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>true</CodeEnabled>
            <AlwaysRun>false</AlwaysRun>
            <Code>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			StreamReader inputFile;
			string folder = @"C:\OWR\";
			string bkc_file = @"bkc.version";
			
			try
            {
            	
                // Check directory exist
                if (Directory.Exists(folder)) {
                    string[] fileEntries = Directory.GetFiles(folder);
            	
                    int count=0;
                    foreach(string fileName in fileEntries)
                    {
                    	string f = fileName.Split('\\').Last();
                    	
                    	if (f.Equals(bkc_file)) {
                            count++;						
                            msgRouter.DebugOutput("File exist = " + fileName);
                        }                    	
                    } 
                    
                    if (count == 0 ){
                    	msgRouter.DebugOutput("File \"" + bkc_file + "\" not found.");
                    	return PassFail.Fail;
                    }
                    
                    msgRouter.DebugOutput("Reading BKC info from file = " + bkc_file);
                    string line = "";
                    try
                    {
                    	count=0;
                    	using (inputFile = new StreamReader(folder+bkc_file))
                    	{                  
                    		while((line = inputFile.ReadLine()) != null ){
                    			
                    			if(string.IsNullOrWhiteSpace(line))
                    			{                    				
                    				msgRouter.DebugOutput("Empty line");
                    				return PassFail.Fail;
                    			}
                    			count++;
                    			msgRouter.DebugOutput("BKC Version = " + line.Trim());
                    			
                    		}  
                    		if (count == 0){
                                msgRouter.DebugOutput("Empty File.");
                                return PassFail.Fail;   
                            }               		
                    	}
                    }
                    catch (Exception ex){
                    	msgRouter.DebugOutput(" {0} Exception caught." + ex);
                    	return PassFail.Fail;
                    }                        
            	}
                
            }
            catch (Exception e)
            {
                msgRouter.DebugOutput("An error occurred while looking for bkc file: " + e.Message);
                return PassFail.Fail;
            }
			
			return PassFail.Pass;
		}
	}
}
</Code>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
          </Node>
          <Node xsi:type="GroupNode">
            <Children>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>120000104 OSInfoTest</Name>
                <Params>
                  <Param Name="ErrorCode" Value="12000104" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>10000</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs />
                <WorkingDirectory />
                <FileName>.\local_collateral\OSInfoTest.exe</FileName>
                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			
			
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(""))
				{
					msgRouter.StatisticOutput("Information",s);
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Disable USB-RJ45 Adapter</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disable "USB\VID_0BDA&amp;PID_8153"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\devcon.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) disabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Disable USB-RJ45 Adapter</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disable "USB\VID_0B95&amp;PID_7720"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\devcon.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) disabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08100301 Lan Speed Check</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08100301" />
                    </Params>
                    <Loops>5</Loops>
                    <OnFail>Continue</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>/c wmic nic get name, speed</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>C:\\Windows\System32\cmd.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(
					s.Contains("Intel(R) Wi-Fi 6E AX211 160MHz             9223372036854775807  ")  || 
					s.Contains(" Intel(R) Ethernet Connection (18) I219-V   1000000000 ")  
				 )
				{
					count++;
				}
			}
			if (count &gt;= 2) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>MAC PROGRAMMING</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="08100202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>/nic=1 /mac=$(MAC1)</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\EEupdate\EEUPDATEW64e.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>MAC Programming</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Disable onboard RJ45 Adapter</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disable "PCI\VEN_8086&amp;DEV_550A&amp;SUBSYS_00008086"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\devcon.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) disabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>5s</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>5</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Enable onboard RJ45 adapter</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>enable "PCI\VEN_8086&amp;DEV_550A&amp;SUBSYS_00008086"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\devcon.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("1 device(s) are enabled"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="CodeNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>MAC Format</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>true</CodeEnabled>
                        <AlwaysRun>false</AlwaysRun>
                        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			string sfc_mac = node.GetRoot().GetGlobalRuntimeParam("MAC1");
             int count = sfc_mac.Length;
             for(int index = 2; index &lt;count; index+=3)
             {
             	sfc_mac= sfc_mac.Insert(index,":");
             }	
     
             msgRouter.DebugOutput(sfc_mac);
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Verify MAC</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="08100202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>-ExecutionPolicy ByPass -File "local_collateral\GetAllMac.PS1"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>powershell.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string GetFFMAC=(node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("MAC1");
			if(GetFFMAC.Length == 0) return PostProcessStatus.ProcessFail;
			
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(GetFFMAC))
				{
					msgRouter.DebugOutput("FF MAC:" + GetFFMAC + " Contains.");
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
		
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>MAC VERIFY</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>MAC address program and verify</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="OkCancelPromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Reinstall</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Reinstall USB Drives then click OK</Message>
                    <Title>Question</Title>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Enum USB Controller</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\EnumUSBControllers.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("xHCI Compliant"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06001902 Enum USB Device</Name>
                    <Params>
                      <Param Name="Error Code " Value="06001902" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumUsb"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("USB Composite Device") || s.Contains("USB Input Device")|| s.Contains("USB Mass Storage Device"))
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			//if(count &gt;= 7) return PostProcessStatus.ProcessPass;
			//else return PostProcessStatus.ProcessFail;
			Node ReInstall = (node as ExecutableNode).GetSibling("USB Reinstall");
			if (count &gt;= 4)
			{
				(ReInstall as ExecutableNode).Enabled = false;
				return PostProcessStatus.ProcessPass;
			}			
			else
			{  
				(ReInstall as ExecutableNode).Enabled = true;
				return PostProcessStatus.ProcessDone;
			}
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06001902 Enum USB Device</Name>
                        <Params>
                          <Param Name="Error Code " Value="06001902" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:EnumUsb"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("USB Composite Device") || s.Contains("USB Input Device")|| s.Contains("USB Mass Storage Device"))
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count &gt;= 8) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="WaitNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>WaitGroup</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>6000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <Duration>1</Duration>
                        <DurationType>Seconds</DurationType>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB Reinstall</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="SerialPortSearchNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>SerialPortSearch</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <SearchBy>PortName</SearchBy>
                        <SerialPortName>Silicon Labs Dual CP2105 USB to UART Bridge: Enhanced COM Port </SerialPortName>
                        <PollFrequencyMs>30000</PollFrequencyMs>
                        <SetAsGlobalVariable>false</SetAsGlobalVariable>
                        <GlobalVariableName>FoundPort</GlobalVariableName>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Micro USB check</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="CodeNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>CodeNode</Name>
                        <Params>
                          <Param Name="USBDrive1" Value="USBSTOR\DISK&amp;VEN_&amp;PROD_USB_DISK_2.0&amp;REV_PMAP\070D275DB553D299&amp;0" />
                          <Param Name="USBDriveType1" Value="Removable Media" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>true</CodeEnabled>
                        <AlwaysRun>true</AlwaysRun>
                        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			string deviceSN;
			node.GetRoot().SetGlobal("USBDriveInfoCount", "0");
			
			//for (int k=1;k&lt;=7;k++)
			//{
            //    node.GetRoot().SetGlobal("USBDriveSN"+k, "");
			//}			
			
			try
            {
                ManagementObjectSearcher searcher = 
                    new ManagementObjectSearcher("root\\CIMV2", 
                    "SELECT * FROM Win32_DiskDrive WHERE PNPDeviceID LIKE \"%USBSTOR%\" "); 

                foreach (ManagementObject queryObj in searcher.Get())
                {
                    foreach (ManagementObject q in queryObj.GetRelated("Win32_PnPEntity"))
                    {
                    	msgRouter.DebugOutput(q.ToString());
                    }
                    
                    deviceSN = queryObj["PNPDeviceID"].ToString().Split('\\').Last().Split('&amp;').First();
                    //msgRouter.DebugOutput(queryObj["PNPDeviceID"].ToString().Split("\\").Last().Split("&amp;").First());
                    
                    count++;
                    node.GetRoot().SetGlobal("USBDrive"+count, queryObj["PNPDeviceID"].ToString());
                    node.GetRoot().SetGlobal("USBDriveType"+count, queryObj["mediaType"].ToString().Trim());
                    node.GetRoot().SetGlobal("USBDriveSN"+count, deviceSN);                    
                    msgRouter.DebugOutput("Count:" + count + " PNPDeviceID:"+ queryObj["PNPDeviceID"] +" mediaType: "+ queryObj["mediaType"]+" SN: "+ deviceSN);
                }
                
            }
            catch (ManagementException e)
            {
             //   msgRouter.DebugOutput("An error occurred while querying for WMI data: " + e.Message);
            }
			
			
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003201 USB Drive Capability</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003201" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs />
                        <WorkingDirectory />
                        <FileName>.\local_collateral\USBViewer.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            int count =1; 
            bool USBMassStorage=false; 
            foreach (string s in node.GetStdOutMsgs())
            {
                if (USBMassStorage)
                {
                	if (s.Contains("Capabilities 1.1: False 2.0: False 3.0: True") || s.Contains("Operating at 3.0: True"))
                    {
                        count++;   
                    }
                }
                
                if (s.Contains("USB Mass Storage Device"))
                {
                	USBMassStorage = true;
                }
                
                if (s.Contains("Operating at 3.0"))
                {
                	USBMassStorage = false; 
                }

            }
            
            msgRouter.DebugOutput("count is " + count);
            if (count &gt;= 3)
            {
            	return PostProcessStatus.ProcessPass;
            }
            else
            {
            	return PostProcessStatus.ProcessFail;
            }
            
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 1 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001276&amp;0 " "--mediaType:External hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 1 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001276&amp;0 " "--mediaType:External hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType1", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202 USB Drive 2 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(USBDriveType2)" "--pnpRoot:$(USBDrive2)" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 2 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(USBDriveType2)" "--pnpRoot:$(USBDrive2)" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType2", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202 USB Drive 3 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(USBDriveType3)" "--pnpRoot:$(USBDrive3)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 3 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(USBDriveType3)" "--pnpRoot:$(USBDrive3)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive3", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType3", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202 USB Drive 4 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001287&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 4 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001287&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive4", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType4", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 5 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(USBDriveType5)" "--pnpRoot:$(USBDrive5)" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 5 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(USBDriveType5)" "--pnpRoot:$(USBDrive5)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive5", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType5", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 6 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001317&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 6 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001317&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive6", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType6", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 7 Read</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001282&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003302 USB Drive 7 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003302" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>100000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK&amp;VEN_ASMT&amp;PROD_2135&amp;REV_0\2119INTEL11000001282&amp;0 " "--mediaType:External hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;
//using System.Windows.Forms;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
	    public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
	    {
            (node as ExecutableNode).GetRoot().SetGlobal("USBDrive7", "");
            (node as ExecutableNode).GetRoot().SetGlobal("USBDriveType7", "");
            foreach (string s in node.GetStdOutMsgs())
            {
                if (s.Contains("&lt;STATUS&gt;: PASS"))
                {
                    return PostProcessStatus.ProcessPass;
                }
            }
            return PostProcessStatus.ProcessFail;
        }
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB Read Write</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>USB (3.0 &amp; 2.0)</Name>
                <Params />
                <Loops>5</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB C Test Card</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>1000000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\USB314_CHK.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string folder = @"log\";
			string resultFile = "result.txt";
			string latestFile = "";
			string line="";					
            string s = ""; //Format output
            int num = 0;
			msgRouter.DebugOutput("Reading results.");
			          
			// Read the log file and display it line by line.
			var filelist = new DirectoryInfo(folder).GetFiles("*.*");
			DateTime lastUpdated = DateTime.MinValue;
			
			foreach(FileInfo f in filelist)
			{
				if (f.LastWriteTime &gt; lastUpdated)
				{
					lastUpdated = f.LastWriteTime;
					latestFile = f.Name;
					msgRouter.DebugOutput("Latest log file: " + latestFile);
				}
			}			
			
			latestFile = folder+latestFile;  // folder+"/202133 - Copy.log";//
			int lineNumber = 0;
			foreach (var match in File.ReadLines(latestFile)
                          .Select((text, index) =&gt; new { text, lineNumber = index+ 1 })
                          .Where(x =&gt; x.text.Contains("Day:")))
			{				
				//msgRouter.DebugOutput("Line "+ match.lineNumber+": " +match.text);				
				lineNumber = match.lineNumber;
				s = String.Format("Line {0, 6} {1,-30}", lineNumber, match.text);
				//msgRouter.StatisticOutput("",s);
				msgRouter.DebugOutput(s);
				
				num += 1;
			}
			msgRouter.DebugOutput("Log file contain "+num+" historical logs. Print the latest.");
			
			using (StreamReader inputFile = new StreamReader(latestFile))
			{
				//Skipping all lines we are not interested in
				for (int i = 1; i &lt; (lineNumber-1); i++)
				{
					inputFile.ReadLine();
				}
			 
				//Print latest log
				while((line = inputFile.ReadLine()) != null) 
				{
					msgRouter.DebugOutput(line);
				}
				inputFile.Close();
			}
			
			// Read the result file and display it
			using (StreamReader inputFile = new StreamReader(resultFile))
			{			
				while((line = inputFile.ReadLine()) != null)  
				{  
					msgRouter.StatisticOutput("", line);
					if(line.Contains("TEST_RESULT=PASS"))
					{
						return PostProcessStatus.ProcessPass;
					}
				}  
				  
				inputFile.Close();
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>USB C Test Card</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Cleanup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\cleanup.bat</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Run USBTreeView</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-R=.\local_collateral\UsbTreeView_x64\adlm.txt</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\UsbTreeView.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB3.2_Gen2 Test(WD P50)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		int a=0, b=0;
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			string strFileName=@".\local_collateral\UsbTreeView_x64\adlm.txt";
            if (File.Exists(strFileName))
            {           
             
             foreach(string line in File.ReadLines(strFileName))
             {
          
             	if(line.Contains("DevIsOpAtSsPlusOrHigher : 1"))
             	  a++;
             	if(line.Contains("DevIsSsPlusCapOrHigher  : 1"))
             	  b++;
             }

             msgRouter.DebugOutput("Found-DevIsOpAtSsPlusOrHigher:" + a.ToString());
             msgRouter.DebugOutput("Found-DevIsSsPlusCapOrHigher:" + b.ToString());
        }
        
     if ((a==2)&amp;&amp;(b==2))
         return PassFail.Pass;

     else
         return PassFail.Fail;

		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>USB3.2_Gen2 Test-WD P50</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Cleanup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\cleanup.bat</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Run USBTreeView</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-R=.\local_collateral\UsbTreeView_x64\adlm.txt</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\UsbTreeView.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB_HUB:2.0(Port4)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		int i;
		int found1 = 0,found2 = 0,found3 = 0,found4 = 0;
		int usbcheck=0;
		List&lt; string &gt; alllines;
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{	
			string strFileName=@".\local_collateral\UsbTreeView_x64\adlm.txt";
			alllines =  new  List&lt; string &gt;();
            if (File.Exists(strFileName))
            {            
             StreamReader sr = new StreamReader(strFileName);
             String line;
             string port01 = node.GetRoot().GetGlobal("PORT4-1");
             string port02 = node.GetRoot().GetGlobal("PORT4-2");
             string port03 = node.GetRoot().GetGlobal("PORT4-3");
             string port04 = node.GetRoot().GetGlobal("PORT4-4");
             
             while ((line = sr.ReadLine()) != null)
              {
              	i++;
              	alllines.Add(line);
             	
                if(line == port01) found1 = i;//port 4-1 check
                if(line == port02) found2 = i;//port 4-2 check
                if(line == port03) found3 = i;//port 4-3 check
                if(line == port04) found4 = i;//port 4-4 check   
              }
//CHECK device connection on port4-1
         msgRouter.DebugOutput("==============PORT4-1===============");  
              msgRouter.DebugOutput("Port Chain               : 1-4-1");
              if(alllines[found1-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found1+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found1+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");

//CHECK device connection on port13-2
         msgRouter.DebugOutput("==============PORT4-2===============");  
              msgRouter.DebugOutput("Port Chain               : 1-4-2");
              if(alllines[found2-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found2+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found2+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-3
         msgRouter.DebugOutput("==============PORT4-3===============");  
              msgRouter.DebugOutput("Port Chain               : 1-4-3");
              if(alllines[found3-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found3+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found3+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-4
         msgRouter.DebugOutput("==============PORT4-4===============");  
              msgRouter.DebugOutput("Port Chain               : 1-4-4");
              if(alllines[found4-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found4+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found4+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
                   
            }	
     msgRouter.DebugOutput("============================================");     
        if(usbcheck==1)
        {
        	msgRouter.DebugOutput("Total: 1 USB2.0 found at USB HUB:PORT 4");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Pass;
        }
           
        else
        {
        	msgRouter.DebugOutput("Total:" + usbcheck.ToString()+ " USB2.0 found at USB HUB:PORT 4");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Fail;
        }
          
            
                 
        }
	
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB_HUB:2.0(Port8)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		int i;
		int found1 = 0,found2 = 0,found3 = 0,found4 = 0;
		int usbcheck=0;
		List&lt; string &gt; alllines;
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{	
			string strFileName=@".\local_collateral\UsbTreeView_x64\adlm.txt";
			alllines =  new  List&lt; string &gt;();
            if (File.Exists(strFileName))
            {            
             StreamReader sr = new StreamReader(strFileName);
             String line;
             string port01 = node.GetRoot().GetGlobal("PORT8-1");
             string port02 = node.GetRoot().GetGlobal("PORT8-2");
             string port03 = node.GetRoot().GetGlobal("PORT8-3");
             string port04 = node.GetRoot().GetGlobal("PORT8-4");
             
             while ((line = sr.ReadLine()) != null)
              {
              	i++;
              	alllines.Add(line);
             	
                if(line == port01) found1 = i;//port 8-1 check
                if(line == port02) found2 = i;//port 8-2 check
                if(line == port03) found3 = i;//port 8-3 check
                if(line == port04) found4 = i;//port 8-4 check   
              }
//CHECK device connection on port4-1
         msgRouter.DebugOutput("==============PORT8-1===============");  
              msgRouter.DebugOutput("Port Chain               : 1-8-1");
              if(alllines[found1-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found1+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found1+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");

//CHECK device connection on port13-2
         msgRouter.DebugOutput("==============PORT8-2===============");  
              msgRouter.DebugOutput("Port Chain               : 1-8-2");
              if(alllines[found2-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found2+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found2+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-3
         msgRouter.DebugOutput("==============PORT8-3===============");  
              msgRouter.DebugOutput("Port Chain               : 1-8-3");
              if(alllines[found3-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found3+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found3+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-4
         msgRouter.DebugOutput("==============PORT8-4===============");  
              msgRouter.DebugOutput("Port Chain               : 1-8-4");
              if(alllines[found4-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found4+14].ToString().Contains("USB version              : 2.00"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found4+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
                   
            }	
     msgRouter.DebugOutput("============================================");     
        if(usbcheck==1)
        {
        	msgRouter.DebugOutput("Total: 1 USB2.0 found at USB HUB:PORT 8");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Pass;
        }
           
        else
        {
        	msgRouter.DebugOutput("Total:" + usbcheck.ToString()+ " USB2.0 found at USB HUB:PORT 8");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Fail;
        }
          
            
                 
        }
	
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB_HUB:3.0&amp;3.1_Gen2(Port13)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		int i;
		int found1 = 0,found2 = 0,found3 = 0,found4 = 0;
		int usbcheck=0;
		List&lt; string &gt; alllines;
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{	
			string strFileName=@".\local_collateral\UsbTreeView_x64\adlm.txt";
			alllines =  new  List&lt; string &gt;();
            if (File.Exists(strFileName))
            {            
             StreamReader sr = new StreamReader(strFileName);
             String line;
             string port01 = node.GetRoot().GetGlobal("PORT13-1");
             string port02 = node.GetRoot().GetGlobal("PORT13-2");
             string port03 = node.GetRoot().GetGlobal("PORT13-3");
             string port04 = node.GetRoot().GetGlobal("PORT13-4");
             
             while ((line = sr.ReadLine()) != null)
              {
              	i++;
              	alllines.Add(line);
             	
                if(line == port01) found1 = i;//port 13-1 check
                if(line == port02) found2 = i;//port 13-2 check
                if(line == port03) found3 = i;//port 13-3 check
                if(line == port04) found4 = i;//port 13-4 check   
              }
//CHECK device connection on port13-1
         msgRouter.DebugOutput("==============PORT13-1===============");  
              msgRouter.DebugOutput("Port Chain               : 1-13-1");
              if(alllines[found1-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found1+14].ToString().Contains("3.1 Gen 2")||alllines[found1+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found1+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");

//CHECK device connection on port13-2
         msgRouter.DebugOutput("==============PORT13-2===============");  
              msgRouter.DebugOutput("Port Chain               : 1-13-2");
              if(alllines[found2-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found2+14].ToString().Contains("3.1 Gen 2")||alllines[found2+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found2+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-3
         msgRouter.DebugOutput("==============PORT13-3===============");  
              msgRouter.DebugOutput("Port Chain               : 1-13-3");
              if(alllines[found3-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found3+14].ToString().Contains("3.1 Gen 2")||alllines[found3+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found3+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-4
         msgRouter.DebugOutput("==============PORT13-4===============");  
              msgRouter.DebugOutput("Port Chain               : 1-13-4");
              if(alllines[found4-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found4+14].ToString().Contains("3.1 Gen 2")||alllines[found4+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found4+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
                   
            }	
     msgRouter.DebugOutput("============================================");     
        if(usbcheck==2)
        {
        	msgRouter.DebugOutput("Total: 2 USB3.0&amp;3.1 Gen2 found at USB HUB:PORT 13");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Pass;
        }
           
        else
        {
        	msgRouter.DebugOutput("Total:" + usbcheck.ToString()+ " USB3.0&amp;3.1 Gen2 found at USB HUB:PORT 13");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Fail;
        }
          
            
                 
        }
	
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>USB_HUB:3.0&amp;3.1_Gen2(Port14)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		int i;
		int found1 = 0,found2 = 0,found3 = 0,found4 = 0;
		int usbcheck=0;
		List&lt; string &gt; alllines;
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{	
			string strFileName=@".\local_collateral\UsbTreeView_x64\adlm.txt";
			alllines =  new  List&lt; string &gt;();
            if (File.Exists(strFileName))
            {            
             StreamReader sr = new StreamReader(strFileName);
             String line;
             string port01 = node.GetRoot().GetGlobal("PORT14-1");
             string port02 = node.GetRoot().GetGlobal("PORT14-2");
             string port03 = node.GetRoot().GetGlobal("PORT14-3");
             string port04 = node.GetRoot().GetGlobal("PORT14-4");
             
             while ((line = sr.ReadLine()) != null)
              {
              	i++;
              	alllines.Add(line);
             	
                if(line == port01) found1 = i;//port 13-1 check
                if(line == port02) found2 = i;//port 13-2 check
                if(line == port03) found3 = i;//port 13-3 check
                if(line == port04) found4 = i;//port 13-4 check   
              }
//CHECK device connection on port13-1
         msgRouter.DebugOutput("==============PORT14-1===============");  
              msgRouter.DebugOutput("Port Chain               : 1-14-1");
              if(alllines[found1-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found1+14].ToString().Contains("3.1 Gen 2")||alllines[found1+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found1+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");

//CHECK device connection on port13-2
         msgRouter.DebugOutput("==============PORT14-2===============");  
              msgRouter.DebugOutput("Port Chain               : 1-14-2");
              if(alllines[found2-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found2+14].ToString().Contains("3.1 Gen 2")||alllines[found2+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found2+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-3
         msgRouter.DebugOutput("==============PORT14-3===============");  
              msgRouter.DebugOutput("Port Chain               : 1-14-3");
              if(alllines[found3-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found3+14].ToString().Contains("3.1 Gen 2")||alllines[found3+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found3+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
//CHECK device connection on port13-4
         msgRouter.DebugOutput("==============PORT14-4===============");  
              msgRouter.DebugOutput("Port Chain               : 1-14-4");
              if(alllines[found4-2].Contains("Device is connected"))
              {
              	   msgRouter.DebugOutput("Connection Status        : 0x01 (Device is connected)");
              	   //check usb type
              	   if(alllines[found4+14].ToString().Contains("3.1 Gen 2")||alllines[found4+14].ToString().Contains("3.0"))
              	  {
              	  	usbcheck++;
              	  	msgRouter.DebugOutput(alllines[found4+14].ToString());
              	  }
              	   
              }
               else
                   msgRouter.DebugOutput("Connection Status        : 0x00 (No device is connected)");
                   
            }	
     msgRouter.DebugOutput("============================================");     
        if(usbcheck==2)
        {
        	msgRouter.DebugOutput("Total: 2 USB3.0&amp;3.1 Gen2 found at USB HUB:PORT 14");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Pass;
        }
           
        else
        {
        	msgRouter.DebugOutput("Total:" + usbcheck.ToString()+ " USB3.0&amp;3.1 Gen2 found at USB HUB:PORT 14");
        	msgRouter.DebugOutput("============================================");
        	return PassFail.Fail;
        }
          
            
                 
        }
	
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>USB_Hub Test(J5J2)</Name>
                <Params>
                  <Param Name="PORT13" Value="Connection Index         : 0x0D (13)" />
                  <Param Name="PORT15" Value="Connection Index         : 0x0D (15)" />
                  <Param Name="PORT13-1" Value="Port Chain               : 1-13-1" />
                  <Param Name="PORT13-2" Value="Port Chain               : 1-13-2" />
                  <Param Name="PORT13-3" Value="Port Chain               : 1-13-3" />
                  <Param Name="PORT13-4" Value="Port Chain               : 1-13-4" />
                  <Param Name="PORT14-1" Value="Port Chain               : 1-14-1" />
                  <Param Name="PORT14-2" Value="Port Chain               : 1-14-2" />
                  <Param Name="PORT14-3" Value="Port Chain               : 1-14-3" />
                  <Param Name="PORT14-4" Value="Port Chain               : 1-14-4" />
                  <Param Name="PORT4-1" Value="Port Chain               : 1-4-1" />
                  <Param Name="PORT4-2" Value="Port Chain               : 1-4-2" />
                  <Param Name="PORT4-3" Value="Port Chain               : 1-4-3" />
                  <Param Name="PORT4-4" Value="Port Chain               : 1-4-4" />
                  <Param Name="PORT8-1" Value="Port Chain               : 1-8-1" />
                  <Param Name="PORT8-2" Value="Port Chain               : 1-8-2" />
                  <Param Name="PORT8-3" Value="Port Chain               : 1-8-3" />
                  <Param Name="PORT8-4" Value="Port Chain               : 1-8-4" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Cleanup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\cleanup.bat</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Run USBTreeView-txt</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>40000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-R=.\local_collateral\UsbTreeView_x64\adlm.txt</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\UsbTreeView.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Parse adlm.txt v1.3</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\local_collateral\UsbTreeView_x64\Release\LinkedList.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 26 Jan 2024
    Version: v1.3
    Purpose: Bug fix - USB version and max speed mismatch.
	
	Author : ayumohamad
    Date   : 15 Aug 2023
    Version: v1.2
    Purpose: Code refactor and bug fix

	Author : ayumohamad
    Date   : 23 Jun 2023
    Version: v1.1
    Purpose: Add support for SuperSpeedPlus 3.1 and 3.2 Gen 2

    Author : ayumohamad
    Date   : 
    Version: v1.0 (Initial)
    Purpose: Read output from USBTreeView execution and parse the adlm.txt file. Summarized all current USB device connected.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class USBDetails
    {
        public string PortChain { get; set; }
        public string Version { get; set; }
    }
    
	public class PostTestStep : IPostProcessStep
	{
		static bool DEBUG = false;
		
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			string port         = "";
			string portChain    = "";
			string desc         = "";
			string status       = "";
			string maxSpeed     = "";
			string usbVersion   = "";
			bool   result       = true;
			bool   passfailFlag = true;
			
			/*
                UPDATE CONNECTED STORAGE COUNT HERE
			*/
			int highSpeed        = 3;
			int superSpeed       = 0;
			int superSpeedPlus31 = 4;
			int superSpeedPlus32 = 0;
						
			Dictionary&lt;string, List &lt;USBDetails&gt;&gt; usbMassStorageDict = new Dictionary&lt;string, List &lt;USBDetails&gt;&gt;();
			
			List&lt;string&gt; sspList = new List&lt;string&gt; {
				"3.1 Gen 2",
				"3.2 Gen 2"
			};
				
			foreach (string s in node.GetStdOutMsgs())
            {
            	if (s.StartsWith("| Port"))
            	{ 
            		string[] subs = s.Split('|');
                    
                    if (DEBUG)
                    {
						string tmp="";
                        foreach (var item in subs)
                        {
                            tmp += " (" + item.Trim() + ") ==&gt; ";
                        }
						msgRouter.DebugOutput(tmp);
                    }
    
                    port = subs[1].Trim();
                    portChain = subs[2].Trim();
                    desc = subs[3].Trim();
                    status = subs[4].Trim();
                    maxSpeed = subs[5].Trim();
                    usbVersion = subs[6].Trim();                  
                                        
                    if (desc.Contains("USB") &amp;&amp; desc.Contains("Mass Storage Device") )
                    {
                    	USBDetails uSBDetails= new USBDetails();
                        uSBDetails.PortChain = portChain;
                        uSBDetails.Version = usbVersion;

                        if (usbMassStorageDict.ContainsKey(maxSpeed))
                        {
                            var existingList = usbMassStorageDict[maxSpeed];
                            existingList.Add(uSBDetails);
                            usbMassStorageDict[maxSpeed] = existingList;
                        }
                        else
                        {
                            List&lt;USBDetails&gt; t = new List&lt;USBDetails&gt;();
                            t.Add(uSBDetails);

                            usbMassStorageDict.Add(maxSpeed, t);
                        }                        
                    }
                }
            }
            
            foreach (KeyValuePair&lt;string, List&lt;USBDetails&gt;&gt; usb in usbMassStorageDict.OrderBy(x =&gt; x.Key))
            {
            	msgRouter.DebugOutput("============================================");
                
                List&lt;USBDetails&gt; usblist = usb.Value;
				int _usbCount = usblist.Count();
                msgRouter.DebugOutput("Found "+_usbCount+" "+usb.Key+" USB device(s) at;");
                
                int countUSB31Gen2 = 0;
                int countUSB32Gen2 = 0;
                foreach (USBDetails _usbDetails in usblist)
                {
                    string s = "&gt;&gt; USB HUB:PORT "+_usbDetails.PortChain+" , Version: "+_usbDetails.Version;
                    
                         if(_usbDetails.Version.Contains("3.1 Gen 2")) countUSB31Gen2++;
                    else if(_usbDetails.Version.Contains("3.2 Gen 2")) countUSB32Gen2++; 

					if(usb.Key == "SuperSpeedPlus" &amp;&amp; !sspList.Contains(_usbDetails.Version, StringComparer.OrdinalIgnoreCase))
					{
						s += " =&gt; Wrong version, not counted";
					}
					
					if(usb.Key == "SuperSpeed" &amp;&amp; sspList.Contains(_usbDetails.Version, StringComparer.OrdinalIgnoreCase))
					{
						s += " =&gt; SuperSpeedPlus downgraded to SuperSpeed.";
						_usbCount--;
					}
						
					msgRouter.DebugOutput(s);
                }
                msgRouter.DebugOutput("");
                
                if(usb.Key == "High-Speed") 
                {
                	result = (highSpeed==_usbCount ? true : false);
                	passfailFlag &amp;= result;
                	
					msgRouter.DebugOutput("USB2.0 count = "+_usbCount+" -&gt; Expected count = "+ highSpeed + " Result: " + (result ? "Pass" : "Fail") );
                }
                else if(usb.Key == "SuperSpeed") 
                {
                	result = (superSpeed==_usbCount ? true : false);   
                	passfailFlag &amp;= result;
                	
                	msgRouter.DebugOutput("USB3.0 count = "+_usbCount+" -&gt; Expected count = "+ superSpeed + " Result: " +(result ? "Pass" : "Fail") );                	
                }                
                else if(usb.Key == "SuperSpeedPlus") 
                {
                	result = (countUSB31Gen2==superSpeedPlus31 ? true : false);
                	passfailFlag &amp;= result;
                	msgRouter.DebugOutput("USB3.1 count = "+countUSB31Gen2+" -&gt; Expected count = "+ superSpeedPlus31 + " Result: " +(result ? "Pass" : "Fail") );
                	
                	result = (countUSB32Gen2==superSpeedPlus32 ? true : false);
                	passfailFlag &amp;= result;
                	msgRouter.DebugOutput("USB3.2 count = "+countUSB32Gen2+" -&gt; Expected count = "+ superSpeedPlus32 + " Result: " +(result ? "Pass" : "Fail") );
                } 
                  
                if (DEBUG) msgRouter.DebugOutput("DEBUG: "+passfailFlag);                             
                msgRouter.DebugOutput("============================================");
            }
			
			if (usbMassStorageDict.Count()==0)
            {
            	msgRouter.DebugOutput("============================================"); 
            	msgRouter.DebugOutput("No USB Storage found."); 
            	msgRouter.DebugOutput("============================================");
            	
            	passfailFlag = false;             	
            } 
			
			if (!passfailFlag)
			{
				msgRouter.ErrorOutput("NOT ALL STORAGE DETECTED OR USB VER. MISMATCH WITH MAXSPEED.");
				return PostProcessStatus.ProcessFail;
			}			
			return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>New_USB_Hub Test</Name>
                <Params>
                  <Param Name="PORT13" Value="Connection Index         : 0x0D (13)" />
                  <Param Name="PORT15" Value="Connection Index         : 0x0D (15)" />
                  <Param Name="PORT13-1" Value="Port Chain               : 1-13-1" />
                  <Param Name="PORT13-2" Value="Port Chain               : 1-13-2" />
                  <Param Name="PORT13-3" Value="Port Chain               : 1-13-3" />
                  <Param Name="PORT13-4" Value="Port Chain               : 1-13-4" />
                  <Param Name="PORT14-1" Value="Port Chain               : 1-14-1" />
                  <Param Name="PORT14-2" Value="Port Chain               : 1-14-2" />
                  <Param Name="PORT14-3" Value="Port Chain               : 1-14-3" />
                  <Param Name="PORT14-4" Value="Port Chain               : 1-14-4" />
                  <Param Name="PORT4-1" Value="Port Chain               : 1-4-1" />
                  <Param Name="PORT4-2" Value="Port Chain               : 1-4-2" />
                  <Param Name="PORT4-3" Value="Port Chain               : 1-4-3" />
                  <Param Name="PORT4-4" Value="Port Chain               : 1-4-4" />
                  <Param Name="PORT8-1" Value="Port Chain               : 1-8-1" />
                  <Param Name="PORT8-2" Value="Port Chain               : 1-8-2" />
                  <Param Name="PORT8-3" Value="Port Chain               : 1-8-3" />
                  <Param Name="PORT8-4" Value="Port Chain               : 1-8-4" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </References>
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 3 Detection - E (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive E</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 5000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 3;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 3 Detection - E (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>50000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive E</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 1000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 3;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 3 Detection - F (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>50000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive F</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 1000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 3;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 3 Detection - C (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive C</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 1000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 3;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>5</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 4 Detection - C(Seq)</Name>
                    <Params />
                    <Loops>5</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive C</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 1000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 4;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 4 Detection - C (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>50000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive C</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 2000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 4;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 4 Detection - E (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive E</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 2000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 4;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 4 Detection - H (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive H</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 5000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 4;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speed Test and Gen 4 Detection - N (Seq)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>disk -seq -read -drive N</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\Sysnative\winsat.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>/*
	Author : ayumohamad
    Date   : 16 Oct 2023
    Version: v1.1
    Purpose: Bug fix

    Author : ayumohamad
    Date   : 22 Sept 2023
    Version: v1.0
    Purpose: Detect SSD Gen 3 &amp; 4 using output from winsat (Windows System Assessment Tool)
*/
using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	/*
	 * UPDATE THIS SECTION
	 *
	 */
	static class Constants
	{
		public const int GEN3_LOW_LIMIT = 500;
		public const int GEN3_HIGH_LIMIT = 5000;
		public const int GEN4_LOW_LIMIT = 20;
		public const int GEN4_HIGH_LIMIT = 60;
		public const int GEN_TO_DETECT = 4;
	}
	
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			msgRouter.DebugOutput("-- Finish Running Winsat --");
			
			//string AANum      = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("PART_NUMBER");
			
			bool flag = true;
			bool _error = false;
			
			double speedvalue = 0;		
			string drivetotest = "";
			
			foreach( string s in node.GetStdOutMsgs() )
			{
				if(flag &amp;&amp; s.Contains("Storage Assessment"))
				{
                    int firstStringPosition = s.IndexOf("-drive");
                    //int secondStringPosition = s.IndexOf("-ran");
                    drivetotest = s.Substring(firstStringPosition+6, 2).ToUpper().Trim();
                    msgRouter.DebugOutput("[LOG] -- Drive to test=&gt; " +drivetotest);
					
					flag = false;
				}
				
				
				if(s.Contains("Disk  Sequential 64.0 Read"))
				{
					string[] ssdspeed = s.Split(' ');
					ssdspeed = ssdspeed.Where(x =&gt; !string.IsNullOrEmpty(x)).ToArray(); // remove empty values
					
					/*for (int i=0; i &lt; ssdspeed.Length;i++)
					{
						msgRouter.DebugOutput(ssdspeed[i]);						
					}					
					*/
					
					//Get Read Speed
					int _len = ssdspeed.Length;
					speedvalue = Convert.ToDouble(ssdspeed[_len-3]);
					//msgRouter.DebugOutput("[LOG] -- Read Speed Unit=&gt; " + ssdspeed[_len-2]);
					msgRouter.DebugOutput("[LOG] -- SEQUENTIAL SPEED: " + speedvalue + " " + ssdspeed[_len-2]);
					
					msgRouter.DebugOutput("[LOG] -- Check Gen version; ");
					
					if ( (speedvalue &gt; Constants.GEN3_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN3_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 3 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 3)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 3, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else if ( (speedvalue &gt; Constants.GEN4_LOW_LIMIT) &amp;&amp; (speedvalue &lt; Constants.GEN4_HIGH_LIMIT))
					{
						msgRouter.DebugOutput("==&gt; Gen 4 detected for drive " + drivetotest);
						
						if (Constants.GEN_TO_DETECT != 4)
						{
							msgRouter.DebugOutput("==&gt; Trying to detect Gen 4, but entered Gen " + Constants.GEN_TO_DETECT);
							_error=true;
						}
					}
					else{
						msgRouter.DebugOutput("==&gt; Unknown Speed Category.");
						_error=true;
					}
					
					if (_error) return PostProcessStatus.ProcessFail;
					
				}
				
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>5</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>SSD Gen Detection (winsat)</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06001901 Enum Storage</Name>
                    <Params>
                      <Param Name="Error Code" Value="06001901" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumStorage"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("SCSI") )
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count == 7 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>CodeNode</Name>
                    <Params>
                      <Param Name="USBDrive1" Value="USBSTOR\DISK&amp;VEN_&amp;PROD_USB_DISK_2.0&amp;REV_PMAP\070D275DB553D299&amp;0" />
                      <Param Name="USBDriveType1" Value="Removable Media" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>true</AlwaysRun>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			try
            {
                ManagementObjectSearcher searcher = 
                    new ManagementObjectSearcher("root\\CIMV2", 
                    "SELECT * FROM Win32_DiskDrive WHERE PNPDeviceID LIKE \"%SCSI%\" "); 

                foreach (ManagementObject queryObj in searcher.Get())
                {
                    count++;
                    node.GetRoot().SetGlobal("SCSIDrive"+count, queryObj["PNPDeviceID"].ToString());
                    node.GetRoot().SetGlobal("SCSIDriveType"+count, queryObj["mediaType"].ToString().Trim());
                    msgRouter.DebugOutput("Count:" + count + " PNPDeviceID:"+ queryObj["PNPDeviceID"] +" mediaType: "+ queryObj["mediaType"]);
                }
            }
            catch (ManagementException e)
            {
             //   msgRouter.DebugOutput("An error occurred while querying for WMI data: " + e.Message);
            }
			
			
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Management.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads-Random1 (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003203 " />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType1)" "--pnpRoot:$(SCSIDrive1)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer1 (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="0600303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType1)" "--pnpRoot:$(SCSIDrive1)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads2</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003203 " />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType2)" "--pnpRoot:$(SCSIDrive2)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003303 SCSI Transfer2</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType2)" "--pnpRoot:$(SCSIDrive2)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType2", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads3</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="060033203" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType3)" "--pnpRoot:$(SCSIDrive3)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer3</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType3)" "--pnpRoot:$(SCSIDrive3)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive3", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType3", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads-Random4 (UFS)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType4)" "--pnpRoot:$(SCSIDrive4)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer4 (UFS)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType4)" "--pnpRoot:$(SCSIDrive4)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive4", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType4", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads5</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="060033203" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType5)" "--pnpRoot:$(SCSIDrive5)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer5</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType5)" "--pnpRoot:$(SCSIDrive5)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive5", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType5", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads-Random6 (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003203 " />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType6)" "--pnpRoot:$(SCSIDrive6)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer6 (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003303" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType6)" "--pnpRoot:$(SCSIDrive6)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive6", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType6", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads7</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="060033203" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType7)" "--pnpRoot:$(SCSIDrive7)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer7</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType7)" "--pnpRoot:$(SCSIDrive7)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive7", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType7", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads-Random (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003203 " />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX" "--mediaType:Fixed hard disk media" "--seqReads:4096" "--mode:Random"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003203 SCSI Reads-Sequential (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003203 " />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_TOSHIBA" "--mediaType:Fixed hard disk media" "--seqReads:8192" "--seqSize:131072"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads2</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="060033203" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType2)" "--pnpRoot:$(SCSIDrive2)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer2</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType2)" "--pnpRoot:$(SCSIDrive2)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType2", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads6</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType6)" "--pnpRoot:$(SCSIDrive6)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer6</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType6)" "--pnpRoot:$(SCSIDrive6)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive6", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType6", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads7</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(SCSIDriveType7)" "--pnpRoot:$(SCSIDrive7)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer7</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType7)" "--pnpRoot:$(SCSIDrive7)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive7", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType7", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>060033203  SCSI Reads7</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX" "--mediaType:Fixed hard disk media" "--seqReads:4096" "--mode:Random"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer7</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>40000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(SCSIDriveType7)" "--pnpRoot:$(SCSIDrive7)" "--seqReads:10"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			(node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive7", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType7", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>0600303 SCSI Transfer1 (UFS)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="0600303" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:SCSI\DISK&amp;VEN_TOSHIBA" "--mediaType:Fixed hard disk media" "--seqReads:64000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>SCSI</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06001901 Enum Storage</Name>
                        <Params>
                          <Param Name="Error Code" Value="06001901" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:EnumStorage"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("SAMSUNG") )
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count == 4 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="CodeNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>CodeNode</Name>
                        <Params>
                          <Param Name="USBDrive1" Value="USBSTOR\DISK&amp;VEN_&amp;PROD_USB_DISK_2.0&amp;REV_PMAP\070D275DB553D299&amp;0" />
                          <Param Name="USBDriveType1" Value="Removable Media" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>true</CodeEnabled>
                        <AlwaysRun>true</AlwaysRun>
                        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			try
            {
                ManagementObjectSearcher searcher = 
                    new ManagementObjectSearcher("root\\CIMV2", 
                    "SELECT * FROM Win32_DiskDrive WHERE PNPDeviceID LIKE \"%SAMSUNG%\" "); 

                foreach (ManagementObject queryObj in searcher.Get())
                {
                    count++;
                    node.GetRoot().SetGlobal("T7-Drive"+count, queryObj["PNPDeviceID"].ToString());
                    node.GetRoot().SetGlobal("T7-DriveType"+count, queryObj["mediaType"].ToString().Trim());
                    msgRouter.DebugOutput("Count:" + count + " PNPDeviceID:"+ queryObj["PNPDeviceID"] +" mediaType: "+ queryObj["mediaType"]);
                }
            }
            catch (ManagementException e)
            {
             //   msgRouter.DebugOutput("An error occurred while querying for WMI data: " + e.Message);
            }
			
			
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 T7-Reads1</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(T7-DriveType1)" "--pnpRoot:$(T7-Drive1)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 T7-Transfer1</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(T7-DriveType1)" "--pnpRoot:$(T7-Drive1)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 T7-Reads2</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(T7-DriveType2)" "--pnpRoot:$(T7-Drive2)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 T7-Transfer2</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(T7-DriveType2)" "--pnpRoot:$(T7-Drive2)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType2", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 T7-Reads3</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(T7-DriveType3)" "--pnpRoot:$(T7-Drive3)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 T7-Transfer3</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(T7-DriveType3)" "--pnpRoot:$(T7-Drive3)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive3", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType3", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 T7-Reads4</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(T7-DriveType4)" "--pnpRoot:$(T7-Drive4)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 T7-Transfer4</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(T7-DriveType4)" "--pnpRoot:$(T7-Drive4)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 T7-Reads5</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(T7-DriveType5)" "--pnpRoot:$(T7-Drive5)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 T7-Transfer5</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(T7-DriveType5)" "--pnpRoot:$(T7-Drive5)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Samsung-T7 SSD</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06001901 Enum Storage</Name>
                        <Params>
                          <Param Name="Error Code" Value="06001901" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:EnumStorage"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("NVME") )
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count == 2 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="CodeNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>CodeNode</Name>
                        <Params>
                          <Param Name="USBDrive1" Value="USBSTOR\DISK&amp;VEN_&amp;PROD_USB_DISK_2.0&amp;REV_PMAP\070D275DB553D299&amp;0" />
                          <Param Name="USBDriveType1" Value="Removable Media" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>true</CodeEnabled>
                        <AlwaysRun>true</AlwaysRun>
                        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			try
            {
                ManagementObjectSearcher searcher = 
                    new ManagementObjectSearcher("root\\CIMV2", 
                    "SELECT * FROM Win32_DiskDrive WHERE PNPDeviceID LIKE \"%NVME%\" "); 

                foreach (ManagementObject queryObj in searcher.Get())
                {
                    count++;
                    node.GetRoot().SetGlobal("NVME-Drive"+count, queryObj["PNPDeviceID"].ToString());
                    node.GetRoot().SetGlobal("NVME-DriveType"+count, queryObj["mediaType"].ToString().Trim());
                    msgRouter.DebugOutput("Count:" + count + " PNPDeviceID:"+ queryObj["PNPDeviceID"] +" mediaType: "+ queryObj["mediaType"]);
                }
            }
            catch (ManagementException e)
            {
             //   msgRouter.DebugOutput("An error occurred while querying for WMI data: " + e.Message);
            }
			
			
			//msgRouter.DebugOutput("example debug Message");
			return PassFail.Pass;
		}
	}
}
</Code>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 NVME-Reads1</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(NVME-DriveType1)" "--pnpRoot:$(NVME-Drive1)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 NVME-Transfer1</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(NVME-DriveType1)" "--pnpRoot:$(NVME-Drive1)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("NVME-Drive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("NVME-DriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 NVME-Reads2</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(NVME-DriveType2)" "--pnpRoot:$(NVME-Drive2)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 NVME-Transfer2</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(NVME-DriveType2)" "--pnpRoot:$(NVME-Drive2)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType2", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 NVME-Reads2</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--mediaType:$(NVME-DriveType2)" "--pnpRoot:$(NVME-Drive2)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 NVME-Transfer3</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--mediaType:$(NVME-DriveType3)" "--pnpRoot:$(NVME-Drive3)" "--seqReads:100"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>NVME SSD</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06001901 Enum Storage</Name>
                        <Params>
                          <Param Name="Error Code" Value="06001901" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:EnumStorage"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("SKHYNIX") )
					count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count == 3 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="CodeNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>CodeNode</Name>
                        <Params>
                          <Param Name="USBDrive1" Value="USBSTOR\DISK&amp;VEN_&amp;PROD_USB_DISK_2.0&amp;REV_PMAP\070D275DB553D299&amp;0" />
                          <Param Name="USBDriveType1" Value="Removable Media" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>true</CodeEnabled>
                        <AlwaysRun>true</AlwaysRun>
                        <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.Management;

namespace Intel.IronTester2
{
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			try
            {
                ManagementObjectSearcher searcher = 
                    new ManagementObjectSearcher("root\\CIMV2", 
                    "SELECT * FROM Win32_DiskDrive WHERE PNPDeviceID LIKE \"%SKHYNIX%\" "); 

                foreach (ManagementObject queryObj in searcher.Get())
                {
                    count++;
                    node.GetRoot().SetGlobal("NVME-Drive"+count, queryObj["PNPDeviceID"].ToString());
                    node.GetRoot().SetGlobal("NVME-DriveType"+count, queryObj["mediaType"].ToString().Trim());
                    msgRouter.DebugOutput("Count:" + count + " PNPDeviceID:"+ queryObj["PNPDeviceID"] +" mediaType: "+ queryObj["mediaType"]);
                }
            }
            catch (ManagementException e)
            {
             //   msgRouter.DebugOutput("An error occurred while querying for WMI data: " + e.Message);
            }
			
			
			//msgRouter.DebugOutput("example debug Message");
			if (count == 3)
			    return PassFail.Pass;
			else
			    return PassFail.Fail;
		}
	}
}
</Code>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Management.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 UFS Reads-Random1 </Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000000" "--mediaType:Fixed hard disk media" "--seqReads:10" "--mode:Random"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>0600303 UFS Transfer1 </Name>
                        <Params>
                          <Param Name="ErrorCode" Value="0600303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000000" "--mediaType:Fixed hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive1", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType1", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 UFS Reads-Random2 </Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203 " />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000002" "--mediaType:Fixed hard disk media" "--seqReads:10" "--mode:Random"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>0600303 UFS Transfer2 </Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000002" "--mediaType:Fixed hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive2", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType2", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203 UFS Reads-Random3 </Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000001" "--mediaType:Fixed hard disk media" "--seqReads:10" "--mode:Random"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>false</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>0600303 UFS Transfer3 </Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000001" "--mediaType:Fixed hard disk media" "--seqReads:10"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
	        (node as ExecutableNode).GetRoot().SetGlobal("SCSIDrive3", "");
            (node as ExecutableNode).GetRoot().SetGlobal("SCSIDriveType3", "");
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>false</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>UFS SKYNIX</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Storage</Name>
                <Params />
                <Loops>5</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100202 Run lspci</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>get-lspci-log.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\sh.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>5</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="CodeNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Detect Gen3,4 &amp; 5 SSD</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>true</CodeEnabled>
                    <AlwaysRun>false</AlwaysRun>
                    <Code>/*
	Author : ayumohamad
    Date   : 19 Mei 2023
    Version: v1.1
    Purpose: Add checking for Gen 5 USB storage.

    Author : ayumohamad
    Date   : 22 Mar 2023
    Version: v1.0
    Purpose: Parse output from PCIE output file and filter Gen 3 &amp; 4 USB storage. 	
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	static class Constants
	{
		public const bool DEBUG = false;
		
		/*
            UPDATE CONNECTED STORAGE COUNT HERE
        */
        public const int gen3 = 1;
        public const int gen4 = 1;
		public const int gen5 = 0;
	}
	
	public class CodeNodeStep
	{
		//Invoke will be executed prior to running the process node. 
		public PassFail Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			/*
                UPDATE FILENAME HERE
            */
			string pciOutputFile = @"pcie\lspci.log";
			string line          = "";
			string devName		 = "";
			bool   NVMNotFound   = false; 
			int    lineNum       = 0;
			
			List&lt;List&lt;string&gt;&gt; ssdDeviceList = new List&lt;List&lt;string&gt;&gt;();
			Dictionary&lt;string, int&gt; ssdGenCntDict = new Dictionary&lt;string, int&gt;()
			{
				{"Gen3", 0},
				{"Gen4", 0},
				{"Gen5", 0}
			};			
			
			try{
				using (StreamReader reader = new StreamReader(pciOutputFile)){
					while((line = reader.ReadLine()) != null) 
					{					
                        lineNum++;					
                        if (Constants.DEBUG){
                            msgRouter.DebugOutput("Line no. = " + lineNum + "  line = " + line);
                        }
                        
                        if (line.Contains("Non-Volatile memory controller:")){
                        	NVMNotFound = true;
                        	
                        	// Get device name								
                        	devName = line.Split(':').Last().Trim();
                        }
						
						if (NVMNotFound &amp;&amp; line.Contains("LnkCap:")) {
							
							List&lt;string&gt; dataList = new List&lt;string&gt;();
							
							string[] capArray = line.Split(',');
							string capSpeed   = capArray[1].Trim();
							string genVersion = "";
							
							if (capSpeed.Contains("32GT/s")){
								genVersion = "Gen 5";
								ssdGenCntDict["Gen5"] += 1;
							}
							else if (capSpeed.Contains("16GT/s")){
								genVersion = "Gen 4";
								ssdGenCntDict["Gen4"] += 1;
							}
							else if (capSpeed.Contains("8GT/s")){
								genVersion = "Gen 3";
								ssdGenCntDict["Gen3"] += 1;
							}
							
							if (Constants.DEBUG){
								msgRouter.DebugOutput ("[DEBUG] " + line);
								
								for (int i = 0; i &lt; capArray.Length; i++){
									msgRouter.DebugOutput("[DEBUG] " + capArray[i]);
								}
							}
							
							dataList.Add(devName);
							dataList.Add(capSpeed);
							dataList.Add(genVersion);
							ssdDeviceList.Add(dataList);
							
							NVMNotFound = false;
						}
                        
                    }
					
					if(ssdDeviceList.Count == 0){
						msgRouter.DebugOutput("============================================"); 
						msgRouter.ErrorOutput("No SSD/NVM Storage found."); 
						msgRouter.DebugOutput("============================================");
						return PassFail.Fail;
					}
					
					msgRouter.DebugOutput("============================================");
					msgRouter.DebugOutput("Found " + ssdDeviceList.Count + " SSD device(s).");
					msgRouter.DebugOutput("============================================");
					lineNum=0;
					foreach (var list in ssdDeviceList)
                    {
                    	lineNum++;                      	
                    	msgRouter.DebugOutput("[ "+lineNum+" ]");
                    	foreach (var element in list)
                        {                            
                            msgRouter.DebugOutput("..."+element);
                        }
                        msgRouter.DebugOutput("");                        
                    }
                    
					if (ssdGenCntDict["Gen3"] == Constants.gen3 &amp;&amp; ssdGenCntDict["Gen4"] == Constants.gen4){
                    	msgRouter.DebugOutput("[1] Gen 3 device count =&gt; "+ssdGenCntDict["Gen3"]);
                    	msgRouter.DebugOutput("[2] Gen 4 device count =&gt; "+ssdGenCntDict["Gen4"]);
						msgRouter.DebugOutput("[2] Gen 5 device count =&gt; "+ssdGenCntDict["Gen5"]);
                    }
                    else{
                    	msgRouter.DebugOutput("============================================"); 
						msgRouter.ErrorOutput("Device count not the same with attached NVM: "); 
						msgRouter.ErrorOutput("Found Gen 3 is "+ssdGenCntDict["Gen3"]+" but set as " + Constants.gen3);
						msgRouter.ErrorOutput("Found Gen 4 is "+ssdGenCntDict["Gen4"]+" but set as " + Constants.gen4);
						msgRouter.ErrorOutput("Found Gen 5 is "+ssdGenCntDict["Gen5"]+" but set as " + Constants.gen5);
						msgRouter.DebugOutput("============================================");
                    	return PassFail.Fail;
                    }
                    msgRouter.DebugOutput("============================================");
				}				
			}
			catch (FileNotFoundException e) {
              msgRouter.DebugOutput("File not exist: " + pciOutputFile);
			  return PassFail.Fail;
            }
			catch (Exception ex){
				msgRouter.DebugOutput("{0} Other exception caught."+ ex);
				return PassFail.Fail;
			}
			
			return PassFail.Pass;
		}
	}
}</Code>
                    <References>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </References>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>SSD Gen Detection (LSPCI)</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="OkCancelPromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Reinstall</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Reinstall TBT Drives then click OK</Message>
                    <Title>Question</Title>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06001901 Enum Storage</Name>
                    <Params>
                      <Param Name="Error Code" Value="06001901" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumStorage"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("DISK&amp;VEN_&amp;PROD_GIGABYTE(CPE)_SA")||s.Contains("DISK&amp;VEN_&amp;PROD_ST500LM030-2E717")||s.Contains("DISK&amp;VEN_NVME&amp;PROD_SANDISK_A400_SD9")||s.Contains("DISK&amp;VEN_NVME&amp;PROD_INTEL_SSDPEKKR25")||s.Contains("DISK&amp;VEN_NVME&amp;PROD_KXG50ZNV512G_NVM")||s.Contains("SCSI"))
				count++;
			}
			//msgRouter.DebugOutput(count.ToString());
			if(count &gt;= 8) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
	</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>eMMCReads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:USBSTOR\DISK" "--mediaType:Removable Media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>eMMC Transfer</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:SCSI" "--mediaType:Fixed hard disk media" "--seqReads:64000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>eMMC</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203-Sata 1 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_ST500LM030-2E717" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 Sata 1 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_ST500LM030-2E717" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203-Sata 2 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_GIGABYTE(CPE)_SA" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 Sata 2 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_GIGABYTE(CPE)_SA" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003203-Sata 3 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003203" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_GIGABYTE(CPE)_SA" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003303 Sata 3 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003303" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:DISK&amp;VEN_&amp;PROD_GIGABYTE(CPE)_SA" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>SATA (Manual)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202-SSD 1 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:NVME&amp;PROD" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003301 SSD 1 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003301" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:NVME&amp;PROD" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202-SSD 2 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:NVME&amp;PROD" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003301 SSD 2 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003301" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:NVME&amp;PROD" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003202-SSD 3 Reads</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003202" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot: NVME&amp;PROD" "--mediaType: Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>06003301 SSD 3 Write</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="06003301" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>60000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:NVME&amp;PROD" "--mediaType: Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>SSD (Manual)</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Storage</Name>
                <Params />
                <Loops>5</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>TBT test</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>SkipIfPassedOrDone</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\EnumTBT.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Thunderbolt 3(TM) Router") 
				||s.Contains("SanDisk Extreme Pro 1TB") 
				)
				count++;
			}
			if(count ==2 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003204 TBT 1 Reads</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003204" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_NVME&amp;PROD_SANDISK_EXTREME\7&amp;B655D0C&amp;0&amp;000000" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003304 TBT 1 Write</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003304" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_NVME&amp;PROD_SANDISK_EXTREME\7&amp;B655D0C&amp;0&amp;000000" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003204 TBT 2 Reads</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003204" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:SCSI\DISK&amp;VEN_NVME&amp;PROD_SANDISK_EXTREME\7&amp;B655D0C&amp;0&amp;000000" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003304 TBT 2 Write</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003304" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:DISK&amp;VEN_NVME&amp;PROD_KXG50ZNV512G_NVM" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003204 TBT 3 Reads</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003204" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageReadTest" "--pnpRoot:DISK&amp;VEN_NVME&amp;PROD_KXG50ZNV512G_NVM" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>06003304 TBT 3 Write</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="06003304" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:StorageWriteTest" "--pnpRoot:DISK&amp;VEN_NVME&amp;PROD_KXG50ZNV512G_NVM" "--mediaType:Fixed hard disk media" "--seqReads:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>TBT</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>SkipIfPassedOrDone</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="PicturePrompt">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>PicturePrompt</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>您安装耳机了吗?</Message>
                    <Title>Confirmation</Title>
                    <Picture>Headset.jpg</Picture>
                    <Font>35</Font>
                    <Buttons>Yes, No</Buttons>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Insert Headset</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Insert Headset, then click OK

插入耳机，然后点击OK键</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>03000102 Enum Active Audio Devices</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="03000102" />
                    </Params>
                    <Loops>5</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumAudio"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			ExecutableNode eNode = node as ExecutableNode;
			if (eNode == null) return PostProcessStatus.ProcessFail;
			string DMIC = eNode.GetGlobal("DMIC");
			string SPK = eNode.GetGlobal("SPK");
			if (DMIC == null || SPK == null)
			{
				return PostProcessStatus.ProcessFail;
			}
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(DMIC)) 
				{
					msgRouter.DebugOutput(DMIC);
					count++;
				}
				if (s.Contains(SPK)) 
				{
					msgRouter.DebugOutput(SPK);
					count++;
				}
				if (s.Contains("Headphones")){
					msgRouter.DebugOutput("Headphones");
					count++;
				}
			}
			if (count &gt;= 2) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="WaitNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>WaitGroup</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>6000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <Duration>1</Duration>
                        <DurationType>Seconds</DurationType>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000302 Headset loopback</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000302" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:AudioLoopBack" "--devName:Headset Microphone on SoundWire Device (4- SoundWire Audio" "--timeout:5" "--location: eGeoLocLeft"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			bool r = false;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Audio exception occured"))
					return PostProcessStatus.ProcessFail;

				if (s.Contains("&lt;STATUS&gt;: PASS"))
                    r = true;
			}
			
            if (r) return PostProcessStatus.ProcessPass;
            
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Headset loopback test</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Regard the Headset</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>Pay attention to headset, but do not put it in your ear.

将耳机放耳朵旁边，但不要放入耳朵里。</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>OK</Buttons>
                      </Node>
                      <Node xsi:type="WaitNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>WaitGroup</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>6000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <Duration>1</Duration>
                        <DurationType>Seconds</DurationType>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000402 Headset Playback</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000402" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:AudioRender" "--devName:Headset" "--location:eGeoLocLeft" "--filename:.\local_collateral\lr.wav" "--toneLength:6" "--duration:10" "--lvolume:0.82" "--rvolume:0.82"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			bool r = false;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Audio exception occured"))
					return PostProcessStatus.ProcessFail;

				if (s.Contains("&lt;STATUS&gt;: PASS"))
                    r = true;
			}
			
            if (r) return PostProcessStatus.ProcessPass;
            
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Did you hear the headset playback</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>Did you hear the voice in the headset?

你是否从耳机中听到声音？</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>Yes,No</Buttons>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Headset Playback</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000102 Switch output dev to headset</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"setdefaultsounddevice" "Headset Earphone on SoundWire Device"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\nircmd.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000102 Switch input dev to HS Microphone</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"setdefaultsounddevice" "Headset Microphone on SoundWire Device"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\nircmd.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>cleanup</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs />
                        <WorkingDirectory />
                        <FileName>.\local_collateral\cleanupwav.bat</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Click "OK" to start record</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>点击OK后，对着麦克风说话。</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>OK</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000002 AMIC Record</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000002" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--record --out=./local_collateral/fmedia/amictest.flac --format=int16 --channels=mono --rate=48000 --until=8</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\fmedia\fmedia.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdErrMsgs())
			{
				if (s.Contains("saved file"))
             return PostProcessStatus.ProcessPass;
            }
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000402 AMIC Playback</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000402" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>./local_collateral/fmedia/amictest.flac</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\fmedia\fmedia.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Did you hear the sound you made on the Headset?</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>听到刚才的录音了吗？</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>Yes,No</Buttons>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Headset AMIC</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Headset</Name>
                <Params />
                <Loops>6</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Insert Headset</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Insert Headset, then click OK</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Enum Active Audio Devices</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumAudio"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			ExecutableNode eNode = node as ExecutableNode;
			if (eNode == null) return PostProcessStatus.ProcessFail;
			string DMIC = eNode.GetGlobal("DMIC");
			string SPK = eNode.GetGlobal("SPK");
			if (DMIC == null || SPK == null)
			{
				return PostProcessStatus.ProcessFail;
			}
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains(DMIC)) 
				{
					msgRouter.DebugOutput(DMIC);
					count++;
				}
				if (s.Contains(SPK)) 
				{
					msgRouter.DebugOutput(SPK);
					count++;
				}
				if (s.Contains("Headphones")){
					msgRouter.DebugOutput("Headphones");
					count++;
				}
			}
			if (count == 3) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speaker L</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:AudioRenderTone" "--devName:Speakers" "--location:eGeoLocRear" "--frequency:1000" "--toneLength:4" "--lvolume:0.80" "--rvolume:0.0"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			bool r = false;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Audio exception occured"))
					return PostProcessStatus.ProcessFail;

				if (s.Contains("&lt;STATUS&gt;: PASS"))
                    r = true;
			}
			
            if (r) return PostProcessStatus.ProcessPass;
            
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Did you hear the tone?</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>听到右边喇叭播放“嘟......”的声音了吗？</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>Yes,No</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Speaker R</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:AudioRenderTone" "--devName:Speakers" "--location:eGeoLocRear" "--frequency:1000" "--toneLength:4" "--lvolume:0.0" "--rvolume:0.80"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			bool r = false;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Audio exception occured"))
					return PostProcessStatus.ProcessFail;

				if (s.Contains("&lt;STATUS&gt;: PASS"))
                    r = true;
			}
			
            if (r) return PostProcessStatus.ProcessPass;
            
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Did you hear the tone?</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>听到左边喇叭播放“嘟......”的声音了吗？</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>Yes,No</Buttons>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000102 Switch output dev to speaker</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"setdefaultsounddevice" "Speakers"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\nircmd.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000102 Switch input dev to Dmic</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"setdefaultsounddevice" "Microphone Array"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\remote_collateral\nircmd.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>cleanup</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000102" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs />
                        <WorkingDirectory />
                        <FileName>.\local_collateral\cleanup.bat</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Click "OK" to start record</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>点击OK后，对着麦克风说话。</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>OK</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000002 DMIC Record</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000002" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--record --out=./local_collateral/fmedia/dmictest.flac --format=int24 --channels=mono --rate=48000 --until=8</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\fmedia\fmedia.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdErrMsgs())
			{
				if (s.Contains("saved file"))
             return PostProcessStatus.ProcessPass;
            }
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>03000402 DMIC Playback</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="03000402" />
                        </Params>
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>./local_collateral/fmedia/dmictest.flac --volume  125</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\fmedia\fmedia.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			if(node.GetExitCode()==0)
			    {
			     return PostProcessStatus.ProcessPass;
			     }
			     return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Did you hear the sound you made on the speaker?</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>听到刚才的录音了吗？</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>22</MessageFontSize>
                        <Buttons>Yes,No</Buttons>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Onboard DMIC</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Speakers</Name>
                <Params />
                <Loops>3</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100101 GenuineIntel</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100101" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\IPDT\GenIntel.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Genuine Intel CPU Module Success!"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01004301 Processor Info</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01004301" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WmiProcessorInfo"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(
					s.Contains(" Genuine Intel(R) 0000")  || 
					//s.Contains((node as ExecutableNode).GetRoot().GetGlobal("CPUBrandName")) ||
					s.Contains(" Intel64 Family 6 Model 204 Stepping 0")  ||
					s.Contains("CurrentClockSpeed: 1400")
				 )
				{
					count++;
				}
			}
			if (count &gt;= 3) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100201 Temperature</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-usp 20</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\IPDT\Temperature.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Test PASSED"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01003904 Check BIOS Info</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01003904" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>40000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WmiBiosInfo"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		private string BIOS = @"BIOSVersion:   INTEL  - 2,PTLPFWI1.R00.3103.D20.2504071929,Intel - 10000"; //IFWI WW6
		//private string BIOS = @"CNLSFWR1.R00.X072.DPO.1702102039"; //IFWI WW10
		private string EC_MAJOR = "EmbeddedControllerMajorVersion: 2";
		private string EC_MINOR = "EmbeddedControllerMinorVersion: 39";
		
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("INTEL  - 2,PTLPFWI1.R00.3103.D20.2504071929,Intel - 10000") 
				|| s.Contains("EmbeddedControllerMajorVersion: 2") 
				|| s.Contains("EmbeddedControllerMinorVersion: 39")
				|| s.Contains("EmbeddedControllerMinorVersion: 39")
				|| s.Contains("INTEL  - 2,PTLPFWI1.R00.3103.D20.2504071929,Intel - 10000"))
				{
					count++;
				}
			}
			if (count &gt;= 2) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100103 Memory Stress</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100103" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>90000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--percent" "80" "--time" "20"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\MemoryStressTest.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (node.GetExitCode()!=0)
				{
					return PostProcessStatus.ProcessFail;
				}
			}
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01004203 Memory Info-Get-WmiObj</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01004203" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Get-WmiObject -Class Win32_PhysicalMemory | Select-Object Capacity, BankLabel, Speed, Manufacturer, PartNumber</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;

			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Capacity     : 4294967296")|| s.Contains("Speed        : 8533"))
				{
					count++;
					//msgRouter.DebugOutput(count.ToString());
				}
					
			}
			
			if (count&gt;=2) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01004203 Memory Info</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01004203" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>memorychip list full</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>WMIC</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;

			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Capacity=2147483648")|| s.Contains("Speed=7467"))
				{
					count++;
					//msgRouter.DebugOutput(count.ToString());
				}
					
			}
			
			if (count &gt;=3) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01004001 Cache</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01004001" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WmiCacheInfo"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\TestLibClient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100104 ME Version</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100104" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>drivernodes "PCI\VEN_8086&amp;DEV_34E0"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\devcon.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Driver version is 1850.13.0.1046"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>02100201 Video Mem. Check</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="02100201" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\EnumVideo.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			bool r = false;
			int expvmem = Int32.Parse((node as ExecutableNode).GetRoot().GetGlobal("VideoMemory"));
			int vmem = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("AdapterRAM:"))
				{
					vmem = 0;
					bool r2 = Int32.TryParse(s.Split(new string[] { "AdapterRAM:" }, StringSplitOptions.None)[1].Trim(),out vmem);
					if (!r2) {r = false; break;}
					msgRouter.DebugOutput("expected:"+expvmem.ToString() + ", found:" + vmem.ToString());
					if(expvmem == vmem) {r = true; break;}					
				}
			}
			return (r) ? PostProcessStatus.ProcessPass : PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>MemRunner</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>-cfg .\remote_collateral\MemRunner\basic.cfg</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\MemRunner\memRunner.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>CPU &amp; Memory</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Enum All Sensors</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumSensors" "--type:Custom"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains((node as ExecutableNode).GetRoot().GetGlobal("Accel")) ||
				 s.Contains((node as ExecutableNode).GetRoot().GetGlobal("Gyro")) ||
					s.Contains((node as ExecutableNode).GetRoot().GetGlobal("Mag")))
				{
					count++;
				}
			}
			if (count &gt;= 3) return PostProcessStatus.ProcessPass;
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002902 BMI160 Accelerometer Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002902" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Accel)" "--streamTime:1" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>ReminderToShake</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>After clicking OK, shake the screen gently.

点击OK键，然后晃动感应器 （3-5次）</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>36</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002902 BMI160 Accelerometer Stream</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002902" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--id:$(Accel)" "--streamTime:8" "--interval:250"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 6)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002906 BMI160 Gyrometer Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002906" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Gyro)" "--streamTime:1" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002906 BMI160 Gyrometer Stream</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002906" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Gyro)" "--streamTime:1" "--interval:100"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 5)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002902 BMA422 Accelerometer Presence</Name>
                    <Params>
                      <Param Name="ErroCode" Value="05002902" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Accel2)" "--streamTime:1" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>ReminderToShake-0</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>After clicking OK, shake the screen gently.

点击OK键，然后晃动感应器 （3-5次）</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>36</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002902 BMA422 Accelerometer Stream</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002902" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--id:$(Accel2)" "--streamTime:3" "--interval:50"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 2)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002901 ALS Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002901" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>--testname:SensorStream --id:00410002-0009-0082-0000-000000000000 --streamTime:1 --interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="PicturePrompt">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>PicturePrompt</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Click Ok ，and then cover the ALS

点击OK键 ， 然后遮盖感应器 （2-3秒）</Message>
                    <Title>Confirmation</Title>
                    <Picture>.\local_collateral\Pictures\alscover.jpg</Picture>
                    <Font>29</Font>
                    <Buttons>YES, CANCEL</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05010029 Magnetometer</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05010029" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Mag)" "--streamTime:2" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 0)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>BIOMETRIC Sensor</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002908" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(BIO)" "--streamTime:2" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 0)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002907 Hall Effect Sensor Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002907" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Hall)" "--streamTime:1" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>ALS Stream</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002901" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--id:$(Als)" "--streamTime:5" "--interval:500"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Events Fired"))
				{
				 	string[] temp = s.Split(':');
				 	if (temp.Length != 3)
				 	{
				 		msgRouter.DebugOutput("No events fired.");
				 		return PostProcessStatus.ProcessFail;
				 	}
				 	else
				 	{
				 		int events;
				 		if (int.TryParse(temp[2].Trim(), out events) &amp;&amp;
				 			events &gt; 3)
				 		{
				 			msgRouter.DebugOutput("Events fired.");
				 			return PostProcessStatus.ProcessPass;
				 		}
				 		else
				 		{
				 			return PostProcessStatus.ProcessFail;
				 		}
				 	}
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05002910 Semtech SAR Sensor Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05002910" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:SensorStream" "--name:$(Sar)" "--streamTime:1" "--interval:1000"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("State: Ready"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Wait 1</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Enumerate Sensors</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="WaitNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>WaitGroup</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>7000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <Duration>2</Duration>
                        <DurationType>Seconds</DurationType>
                      </Node>
                      <Node xsi:type="PicturePrompt">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Prompt monitor display</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>Does the monitor turned on and displayed correctly?</Message>
                        <Title>Display Monitor Check</Title>
                        <Picture>local_collateral\Pictures\external_monitor.jpg</Picture>
                        <Font>30</Font>
                        <Buttons>Yes, No</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>02100107 Detect Display Monitor</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="02100107" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\remote_collateral\enummons.vbs</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>c:\windows\system32\cscript.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2

{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("DISPLAY") 
				|| s.Contains("SAM0CB7") 
				|| s.Contains("AUO432D")
				|| s.Contains("AUO572D")
				|| s.Contains("SAM09E9")
				|| s.Contains("SHP14A7") 
				|| s.Contains("SHP1473"))
				count++;
			}
			if(count == 2) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="PicturePrompt">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Prompt monitor display for 4K/5K Monitor</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>Does the 4K/5K monitor turned on and displayed correctly?</Message>
                        <Title>Display Monitor Check</Title>
                        <Picture>local_collateral\Pictures\external_monitor.jpg</Picture>
                        <Font>30</Font>
                        <Buttons>Yes, No</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>02100107 Detect 4K/5K Monitor</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="02100107" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\local_collateral\GetMaxDisplayResolution.ps1</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class Monitor {
        public string Name {get; set;}
        public string Dimension    {get; set;}
    }

	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	
			bool flag = false;
			
			List&lt;Monitor&gt; displayMwuxgaList = new List&lt;Monitor&gt;();
			List&lt;Monitor&gt; display4KList = new List&lt;Monitor&gt;();
			List&lt;Monitor&gt; display5KList = new List&lt;Monitor&gt;();
			
			foreach(string s in node.GetStdOutMsgs())
			{				
				if(flag)
				{				
					string[] dimension = s.Split(':');									
					
					if(dimension.Length&gt;1)
					{
						Monitor m = new Monitor();
						
						m.Name = dimension[0].Trim();
						m.Dimension    = dimension[1].Trim();
						
						switch (m.Dimension)
						{
							case "1920x1200":
								displayMwuxgaList.Add(m);
								break;
							case "3840x2160": 
								display4KList.Add(m);
								break;
							case "5120x2880": 
								display5KList.Add(m);
								break;
						}						
					}
				}				
				
				if(s.Contains("DisplayName"))
				{
					flag=true;					
				}
			}
			
			msgRouter.DebugOutput("============================================");
			if(displayMwuxgaList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + displayMwuxgaList.Count() + " WUXGA monitor found.");
            	foreach(var obj in displayMwuxgaList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" WUXGA monitor not found.");
			}

			if(display4KList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + display4KList.Count() + " 4K monitor found.");
            	foreach(var obj in display4KList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" 4K monitor not found.");
			}
			
			if(display5KList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + display5KList.Count() + " 5K monitor found.");
            	foreach(var obj in display5KList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" 5K monitor not found.");
			}			
			msgRouter.DebugOutput("============================================");
			
			if (displayMwuxgaList.Count() == 0 &amp;&amp; display4KList.Count() == 0 &amp;&amp; display5KList.Count() == 0)
            {
            	msgRouter.DebugOutput("============================================"); 
            	msgRouter.DebugOutput("Display for 4K or 5K not found."); 
            	msgRouter.DebugOutput("============================================");
            	
            	flag = false;             	
            }
			
			if(flag) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Display</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="WaitNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>WaitGroup</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>7000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <Duration>2</Duration>
                        <DurationType>Seconds</DurationType>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>02100107 Check Display Monitor</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="02100107" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\remote_collateral\enummons.vbs</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>c:\windows\system32\cscript.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2

{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("DISPLAY") 
				|| s.Contains("SAM0CB7") 
				|| s.Contains("AUO432D")
				|| s.Contains("AUO572D")
				|| s.Contains("SAM09E9")
				|| s.Contains("SHP14A7") 
				|| s.Contains("SHP1473"))
				count++;
			}
			if(count == 1) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>02100107 Detect 4K/5K Monitor</Name>
                        <Params>
                          <Param Name="ErrorCode" Value="02100107" />
                        </Params>
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\local_collateral\GetMaxDisplayResolution.ps1</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class Monitor {
        public string Name {get; set;}
        public string Dimension    {get; set;}
    }

	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	
			bool flag = false;
			
			List&lt;Monitor&gt; displayMwuxgaList = new List&lt;Monitor&gt;();
			List&lt;Monitor&gt; display4KList = new List&lt;Monitor&gt;();
			List&lt;Monitor&gt; display5KList = new List&lt;Monitor&gt;();
			
			foreach(string s in node.GetStdOutMsgs())
			{				
				if(flag)
				{				
					string[] dimension = s.Split(':');									
					
					if(dimension.Length&gt;1)
					{
						Monitor m = new Monitor();
						
						m.Name = dimension[0].Trim();
						m.Dimension    = dimension[1].Trim();
						
						switch (m.Dimension)
						{
							case "1920x1200":
								displayMwuxgaList.Add(m);
								break;
							case "3840x2160": 
								display4KList.Add(m);
								break;
							case "5120x2880": 
								display5KList.Add(m);
								break;
						}						
					}
				}				
				
				if(s.Contains("DisplayName"))
				{
					flag=true;					
				}
			}
			
			msgRouter.DebugOutput("============================================");
			if(displayMwuxgaList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + displayMwuxgaList.Count() + " WUXGA monitor found.");
            	foreach(var obj in displayMwuxgaList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" WUXGA monitor not found.");
			}

			if(display4KList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + display4KList.Count() + " 4K monitor found.");
            	foreach(var obj in display4KList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" 4K monitor not found.");
			}
			
			if(display5KList.Count()!=0)
            {
            	msgRouter.DebugOutput("Total: " + display5KList.Count() + " 5K monitor found.");
            	foreach(var obj in display5KList)
            	{					
            		msgRouter.DebugOutput(" &gt;&gt;  " + obj.Name + " , Resolution: " + obj.Dimension);
                }
                msgRouter.DebugOutput(""); 
            }else{
				msgRouter.DebugOutput(" 5K monitor not found.");
			}			
			msgRouter.DebugOutput("============================================");
			
			if (displayMwuxgaList.Count() == 0 &amp;&amp; display4KList.Count() == 0 &amp;&amp; display5KList.Count() == 0)
            {
            	msgRouter.DebugOutput("============================================"); 
            	msgRouter.DebugOutput("Display for 4K or 5K not found."); 
            	msgRouter.DebugOutput("============================================");
            	
            	flag = false;             	
            }
			
			if(flag) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Display</Name>
                    <Params />
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="GroupNode">
                        <Children>
                          <Node xsi:type="ProcessNode">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>cleanup</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>10000</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <CmdLineArgs>/c del .\*.jpeg</CmdLineArgs>
                            <WorkingDirectory />
                            <FileName>c:\windows\system32\cmd.exe</FileName>
                            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                            <PreStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PreStepReferences>
                            <EnablePreStepCode>false</EnablePreStepCode>
                            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                            <PostStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PostStepReferences>
                            <EnablePostStepCode>false</EnablePostStepCode>
                          </Node>
                          <Node xsi:type="ProcessNode">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>04001601 OV13B10 Back Camera Presence</Name>
                            <Params>
                              <Param Name="ErrorCode" Value="04001601" />
                            </Params>
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>10000</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <CmdLineArgs>--testname:EnumCamera</CmdLineArgs>
                            <WorkingDirectory />
                            <FileName>.\local_collateral\TestLibClient.exe</FileName>
                            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                            <PreStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PreStepReferences>
                            <EnablePreStepCode>false</EnablePreStepCode>
                            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Logitech BRIO: \\?\USB#VID_046D&amp;PID_085E&amp;MI_00#7&amp;3a97831a&amp;0&amp;0000#{e5323777-f976-4f5b-9b55-b94699c46e44"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                            <PostStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PostStepReferences>
                            <EnablePostStepCode>true</EnablePostStepCode>
                          </Node>
                          <Node xsi:type="ProcessNode">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>04000801 OV13B10 Back Camera Capture Test</Name>
                            <Params>
                              <Param Name="ErrorCode" Value="04000801" />
                            </Params>
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>25000</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <CmdLineArgs>"--testname:CameraCapture" "--devName:OV01AS" "--delay:8" "--frames:5" "--path:.\UFCam1"</CmdLineArgs>
                            <WorkingDirectory />
                            <FileName>.\local_collateral\TestLibClient.exe</FileName>
                            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                            <PreStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PreStepReferences>
                            <EnablePreStepCode>false</EnablePreStepCode>
                            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                            <PostStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PostStepReferences>
                            <EnablePostStepCode>true</EnablePostStepCode>
                          </Node>
                          <Node xsi:type="PicturePrompt">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>OV01AS Camera Capture Check</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>false</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <Message>Do you see a picture showing the scene in front of the RVP?</Message>
                            <Title>Confirmation</Title>
                            <Picture>.\UFCam14.jpeg</Picture>
                            <Font>25.8</Font>
                            <Buttons>Yes, No</Buttons>
                          </Node>
                          <Node xsi:type="GroupNode">
                            <Children>
                              <Node xsi:type="ProcessNode">
                                <Children />
                                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                                <Name>cleanup</Name>
                                <Params />
                                <Loops>1</Loops>
                                <OnFail>Halt</OnFail>
                                <LoopUntilPass>false</LoopUntilPass>
                                <TimeOutMs>10000</TimeOutMs>
                                <Enabled>true</Enabled>
                                <CriticalNode>false</CriticalNode>
                                <ResultToReport>false</ResultToReport>
                                <OnRetry>RetryAlways</OnRetry>
                                <AlwaysRun>false</AlwaysRun>
                                <CmdLineArgs>/c del .\*.jpeg</CmdLineArgs>
                                <WorkingDirectory />
                                <FileName>c:\windows\system32\cmd.exe</FileName>
                                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                                <PreStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PreStepReferences>
                                <EnablePreStepCode>false</EnablePreStepCode>
                                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                                <PostStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PostStepReferences>
                                <EnablePostStepCode>false</EnablePostStepCode>
                              </Node>
                              <Node xsi:type="ProcessNode">
                                <Children />
                                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                                <Name>04001601 OV13B10 Front Camera Presence</Name>
                                <Params>
                                  <Param Name="ErrorCode" Value="04001601" />
                                </Params>
                                <Loops>1</Loops>
                                <OnFail>Halt</OnFail>
                                <LoopUntilPass>false</LoopUntilPass>
                                <TimeOutMs>10000</TimeOutMs>
                                <Enabled>true</Enabled>
                                <CriticalNode>false</CriticalNode>
                                <ResultToReport>false</ResultToReport>
                                <OnRetry>RetryAlways</OnRetry>
                                <AlwaysRun>false</AlwaysRun>
                                <CmdLineArgs>--testname:EnumCamera</CmdLineArgs>
                                <WorkingDirectory />
                                <FileName>.\local_collateral\TestLibClient.exe</FileName>
                                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                                <PreStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PreStepReferences>
                                <EnablePreStepCode>false</EnablePreStepCode>
                                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("OV13B10"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                                <PostStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PostStepReferences>
                                <EnablePostStepCode>true</EnablePostStepCode>
                              </Node>
                              <Node xsi:type="ProcessNode">
                                <Children />
                                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                                <Name>04000801 OV13B10 Front Camera Capture Test</Name>
                                <Params>
                                  <Param Name="ErrorCode" Value="04000801" />
                                </Params>
                                <Loops>1</Loops>
                                <OnFail>Halt</OnFail>
                                <LoopUntilPass>false</LoopUntilPass>
                                <TimeOutMs>25000</TimeOutMs>
                                <Enabled>true</Enabled>
                                <CriticalNode>false</CriticalNode>
                                <ResultToReport>false</ResultToReport>
                                <OnRetry>RetryAlways</OnRetry>
                                <AlwaysRun>false</AlwaysRun>
                                <CmdLineArgs>"--testname:CameraCapture" "--devName:OV13858" "--delay:8" "--frames:5" "--path:.\UFCam1"</CmdLineArgs>
                                <WorkingDirectory />
                                <FileName>.\local_collateral\TestLibClient.exe</FileName>
                                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                                <PreStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PreStepReferences>
                                <EnablePreStepCode>false</EnablePreStepCode>
                                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
                                <PostStepReferences>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                    <Gac>false</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>mscorlib.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Core.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                  <AsmRef>
                                    <Asm>System.Xml.Linq.dll</Asm>
                                    <Gac>true</Gac>
                                  </AsmRef>
                                </PostStepReferences>
                                <EnablePostStepCode>true</EnablePostStepCode>
                              </Node>
                              <Node xsi:type="PicturePrompt">
                                <Children />
                                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                                <Name>OV01AS Camera Capture Check</Name>
                                <Params />
                                <Loops>1</Loops>
                                <OnFail>Halt</OnFail>
                                <LoopUntilPass>false</LoopUntilPass>
                                <TimeOutMs>0</TimeOutMs>
                                <Enabled>false</Enabled>
                                <CriticalNode>false</CriticalNode>
                                <ResultToReport>false</ResultToReport>
                                <OnRetry>RetryAlways</OnRetry>
                                <AlwaysRun>false</AlwaysRun>
                                <Message>Do you see a picture showing the scene in front of the RVP?</Message>
                                <Title>Confirmation</Title>
                                <Picture>.\UFCam11.jpeg</Picture>
                                <Font>25.8</Font>
                                <Buttons>Yes, No</Buttons>
                              </Node>
                            </Children>
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>WF Camera</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <CodeEnabled>false</CodeEnabled>
                            <References />
                            <GroupType>Serial</GroupType>
                          </Node>
                        </Children>
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>UF Camera</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>false</CodeEnabled>
                        <References />
                        <GroupType>Serial</GroupType>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Camera</Name>
                    <Params />
                    <Loops>7</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Volume Up Prompt</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>After clicking OK, Press the VolumeUp BUTTON 5 times</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>26</MessageFontSize>
                        <Buttons>OK</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Volume Up</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--testname:KeyboardDownEvents --listenTime:8</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int c = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("KeyPressed: VOLUME_UP")) c++;				
			}
			return (c &gt;= 3) ? (PostProcessStatus.ProcessPass) : (PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Volume Down Prompt</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>After clicking OK, Press the VolumeDown BUTTON 5 times</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>36</ButtonFontSize>
                        <MessageFontSize>26</MessageFontSize>
                        <Buttons>OK</Buttons>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Volume Down</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--testname:KeyboardDownEvents --listenTime:8</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int c = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("KeyPressed: VOLUME_DOWN")) c++;				
			}
			return (c &gt;= 3) ? (PostProcessStatus.ProcessPass) : (PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>buttons</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="GroupNode">
                        <Children>
                          <Node xsi:type="PicturePrompt">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>Power Button </Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>true</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <Message>Once screen completely off, press "Power Button". Click "Yes" to continue.</Message>
                            <Title>Confirmation</Title>
                            <Picture>PowerButton.PNG</Picture>
                            <Font>35</Font>
                            <Buttons>Yes, No</Buttons>
                          </Node>
                          <Node xsi:type="ProcessNode">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>Sleep</Name>
                            <Params>
                              <Param Name="ErrorCode" Value="12000102" />
                            </Params>
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>false</LoopUntilPass>
                            <TimeOutMs>100000</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <CmdLineArgs>"/sleep" "/s:3"</CmdLineArgs>
                            <WorkingDirectory />
                            <FileName>.\local_collateral\pwrtest.exe</FileName>
                            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                            <PreStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PreStepReferences>
                            <EnablePreStepCode>false</EnablePreStepCode>
                            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("EffectiveState:    S4"))
				{count++;}
			    if(s.Contains("No.0 Transition -- Complete"))
				{count++;}
			}
			if (count==2)
			{
				return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                            <PostStepReferences>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Framework.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                                <Gac>false</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>mscorlib.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Data.DataSetExtensions.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Core.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                              <AsmRef>
                                <Asm>System.Xml.Linq.dll</Asm>
                                <Gac>true</Gac>
                              </AsmRef>
                            </PostStepReferences>
                            <EnablePostStepCode>true</EnablePostStepCode>
                          </Node>
                        </Children>
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Power Button</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>false</CodeEnabled>
                        <References />
                        <GroupType>Serial</GroupType>
                      </Node>
                      <Node xsi:type="GroupNode">
                        <Children>
                          <Node xsi:type="PicturePrompt">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>Caps Lock Button</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>true</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <Message>Press "Caps Lock Button" and observe 1st LED light up</Message>
                            <Title>Confirmation</Title>
                            <Picture>CapsLockButton.PNG</Picture>
                            <Font>35</Font>
                            <Buttons>Yes, No</Buttons>
                          </Node>
                        </Children>
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Caps Lock Button</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>false</CodeEnabled>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                        <GroupType>Serial</GroupType>
                      </Node>
                      <Node xsi:type="GroupNode">
                        <Children>
                          <Node xsi:type="PicturePrompt">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>Num Lock Button</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>true</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <Message>Press "Num Lock Button" and observed 2nd LED light up</Message>
                            <Title>Confirmation</Title>
                            <Picture>NumLockButton.PNG</Picture>
                            <Font>35</Font>
                            <Buttons>Yes, No</Buttons>
                          </Node>
                        </Children>
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Num Lock Button</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>false</CodeEnabled>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                        <GroupType>Serial</GroupType>
                      </Node>
                      <Node xsi:type="GroupNode">
                        <Children>
                          <Node xsi:type="PicturePrompt">
                            <Children />
                            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                            <Name>Scroll Lock Button</Name>
                            <Params />
                            <Loops>1</Loops>
                            <OnFail>Halt</OnFail>
                            <LoopUntilPass>true</LoopUntilPass>
                            <TimeOutMs>0</TimeOutMs>
                            <Enabled>true</Enabled>
                            <CriticalNode>false</CriticalNode>
                            <ResultToReport>false</ResultToReport>
                            <OnRetry>RetryAlways</OnRetry>
                            <AlwaysRun>false</AlwaysRun>
                            <Message>Press "Scroll Lock Button" and observed 3rd LED light up.</Message>
                            <Title>Confirmation</Title>
                            <Picture>ScrollLockButton.PNG</Picture>
                            <Font>35</Font>
                            <Buttons>Yes, No</Buttons>
                          </Node>
                        </Children>
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Scroll Lock Button</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <CodeEnabled>false</CodeEnabled>
                        <References>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </References>
                        <GroupType>Serial</GroupType>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Button Test ( EC Interposer)</Name>
                    <Params />
                    <Loops>5</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Keypad Presence</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\remote_collateral\GetMice.vbs</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>c:\windows\system32\cscript.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
            foreach(string s in node.GetStdOutMsgs())
            {
            	if(s.Contains("HID-compliant mouse"))
                    return PostProcessStatus.ProcessPass;
            }

			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Keypad Test</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>45000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>45</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\MouseTest.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("PASSED"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Touchpad</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Keyboard Test</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>610000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>"--testname:KeyboardFuncTest" "--listenTime:360" "--confFile:.\local_collateral\tgl_gcs.ini"</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\testlibclient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("&lt;STATUS&gt;: PASS"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ConfigurablePromptNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Numlock/Capslock Check</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>0</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <Message>按下Numlk和Caps lock按钮，看一下指示灯是否可以亮起和关闭。
如果可以，点击OK。否则点FAIL。</Message>
                        <Title>Confirmation</Title>
                        <ButtonFontSize>40</ButtonFontSize>
                        <MessageFontSize>21</MessageFontSize>
                        <Buttons>OK,FAIL</Buttons>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Keyboard</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Tuchscreen Test</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>45000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>45</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\MouseTest.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("PASSED"))
                    return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Touch FW Check</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>10000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs />
                        <WorkingDirectory />
                        <FileName>.\local_collateral\SKL_SDS_Touch\GetFWG4.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains(node.GetGlobal("TOUCHFWVER")))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Touchscreen Grid Test</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>40000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--testname:GridTouch --timeout:35 --rows:8 --cols:8</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("&lt;STATUS&gt;: PASS"))
					return PostProcessStatus.ProcessPass;
			}
			
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Multitouch</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>--testname:MultiTouch --timeout=25 --width=1.5 --height=1.5 --contacts:4</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\TestLibClient.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("&lt;STATUS&gt;: PASS"))
					return PostProcessStatus.ProcessPass;
			}
			
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Stylus Test (Draw)</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>timeout=20 lines=650 stylusid=$(STYLUS_CNL_SDS) debug=1 mode=draw</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\StylusFuncTest.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Stylus test PASS"))
                    return PostProcessStatus.ProcessPass;
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Stylus Test (Button)</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>timeout=20 lines=650 stylusid=$(STYLUS_CNL_SDS_BUTTON) debug=1 mode=draw cnl=1</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\StylusFuncTest.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Stylus test PASS"))
                    return PostProcessStatus.ProcessPass;
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Stylus Test (Hover)</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>20000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>timeout=20 lines=650 stylusid=$(STYLUS_CNL_SDS) debug=1 mode=hover</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>.\local_collateral\StylusFuncTest.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Stylus test PASS"))
                    return PostProcessStatus.ProcessPass;
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>TouchScreen</Name>
                    <Params />
                    <Loops>3</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Input Device Tests</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>09000103 TPM Presence</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\GetTPM.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{			
            string mv = "ManufacturerVersion: 15.23.17664.0";
			string mvi = "ManufacturerVersionInfo: SLB9672";
			string ppvi = "PhysicalPresenceVersionInfo: 1.3";
			
			//string mv = "ManufacturerVersion: 12.0";
			//string mvi = "ManufacturerVersionInfo: 496e74656c000000000000000000000000";
			//string ppvi = "PhysicalPresenceVersionInfo: 1.3";
			int c = 0;
			
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains(mv) || s.Contains(mvi) || s.Contains(ppvi))
					c++;
				if (c&gt;=3) return PostProcessStatus.ProcessPass;
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Security</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100102 LPC Device ID(IPDT)</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100102" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs />
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\IPDT\PCH.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("LPC deviceID = 0xe401"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>01100102 Platform Controller Hub</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="01100102" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:CpuMonitor"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS") || s.Contains("Status: Charging")) 
				{
					count++;
				}
			}
	
			return (count==2) ? (PostProcessStatus.ProcessPass) : (PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>PCH</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="GroupNode">
                    <Children>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Learn PCIE Map</Name>
                        <Params />
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\remote_collateral\EnumPCI.vbs</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>c:\windows\system32\cscript.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
            
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("PCI_BUS_"))
				{   
					count++;
					(node as ExecutableNode).GetRoot().SetGlobal("LearnPCIEMap"+count, s);
				}
			}
			(node as ExecutableNode).GetRoot().SetGlobal("LearnPCIEMapCount", count.ToString());
			msgRouter.DebugOutput("Number of PCIE item learnt: "+(node as ExecutableNode).GetRoot().GetGlobal("LearnPCIEMapCount"));
			return PostProcessStatus.ProcessPass;
			//else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>PCIE Map</Name>
                        <Params />
                        <Loops>2</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>true</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>true</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>.\remote_collateral\EnumPCI.vbs</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>c:\windows\system32\cscript.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>true</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("")  
				||s.Contains("PCI Express Upstream Switch Port")
				||s.Contains("PCI Express Upstream Switch Port")
				||s.Contains("PCI Express Downstream Switch Port")
				||s.Contains("PCI Express Downstream Switch Port")
				||s.Contains("PCI Express Downstream Switch Port")
				||s.Contains("PCI Express to PCI/PCI-X Bridge")
				||s.Contains("Intel(R) Ethernet Connection (18) I219-LM")
				||s.Contains("Standard NVM Express Controller")
				)
				count++;
			}
			if(count &gt;=8 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}

</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                      <Node xsi:type="ProcessNode">
                        <Children />
                        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                        <Name>Link Speed and Width</Name>
                        <Params />
                        <Loops>1</Loops>
                        <OnFail>Halt</OnFail>
                        <LoopUntilPass>false</LoopUntilPass>
                        <TimeOutMs>30000</TimeOutMs>
                        <Enabled>false</Enabled>
                        <CriticalNode>false</CriticalNode>
                        <ResultToReport>false</ResultToReport>
                        <OnRetry>RetryAlways</OnRetry>
                        <AlwaysRun>false</AlwaysRun>
                        <CmdLineArgs>Get-NetAdapterHardwareInfo | Select-Object Slot, PcieLinkSpeed, PcieLinkWidth, Name</CmdLineArgs>
                        <WorkingDirectory />
                        <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                        <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                        <PreStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PreStepReferences>
                        <EnablePreStepCode>false</EnablePreStepCode>
                        <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0; 
			foreach (string s in node.GetStdOutMsgs())
			{
				string line = s.TrimStart(' ');
		
				if (line.StartsWith("14"))
				{	
					string[] Seperator = new string[] {" "};
					string[] array = line.Split(Seperator, StringSplitOptions.RemoveEmptyEntries);
					//if (array[1] =="Wi-Fi")
                    //{
                        if ((array[1] == "2.5") &amp;&amp; (array[3] == "1"))
                        {
                            count++;
                            //return PostProcessStatus.ProcessPass;
                        }
                        else
                        {
                        	msgRouter.ErrorOutput("Link Speed or width failed");
                        	//Link Speed or width failed
                        }
					
                    //}
                    //else
                    //{
                    	//msgRouter.ErrorOutput("Ensure the correct card plug in");
                    	//Ensure the correct card plug in
                
                   //}
				
				}
			
			}
			if (count &gt;= 1) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                        <PostStepReferences>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Framework.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.Plugins.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                            <Gac>false</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>mscorlib.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Data.DataSetExtensions.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Core.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                          <AsmRef>
                            <Asm>System.Xml.Linq.dll</Asm>
                            <Gac>true</Gac>
                          </AsmRef>
                        </PostStepReferences>
                        <EnablePostStepCode>true</EnablePostStepCode>
                      </Node>
                    </Children>
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>PCIE Map</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <CodeEnabled>false</CodeEnabled>
                    <References />
                    <GroupType>Serial</GroupType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100201 Link Speed and Width-Slot 1</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Get-NetAdapterHardwareInfo | Select-Object Slot, PcieLinkSpeed, PcieLinkWidth, Name</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Wi-Fi") 
				||s.Contains("Ethernet") )
				count++;
			}
			if(count ==2 ) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>PCIE</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100202 J8C1 1x Slot</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Slot1_X8.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\sh.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100203 J6C3 2x Slot</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Slot1_X8.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\sh.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100204 J8C1 1x Slot</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>Slot1_X8.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\sh.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>LSPCI PCIE</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100202 J5C2 x16</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>bash MTLS_PCIE_Slot_J5C2.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\busybox.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100204 J7B1 x4</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>bash MTLS_PCIE_Slot_J7B1.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\busybox.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100203 J8B2 x4</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>bash MTLS_PCIE_Slot_J8B2.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\busybox.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>07100204 J9B2 x4</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="07100201" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>30000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>bash MTLS_PCIE_Slot_J9B2.sh</CmdLineArgs>
                    <WorkingDirectory>.\pcie\</WorkingDirectory>
                    <FileName>.\pcie\busybox.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
          {	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
                if( s.Contains("FAIL") )
                {
                	return PostProcessStatus.ProcessFail;
                }
			}
			
            return PostProcessStatus.ProcessPass;
		}
	}
}</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>RWPCI PCIE</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>8000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>3</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>09000101 SMBus</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="09000101" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\EnumPCI.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>true</EnablePreStepCode>
                    <PostStepCode>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Intel.IronTester2.Sequence;

namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{	int count = 0;
			foreach(string s in node.GetStdOutMsgs())
			{
				if( s.Contains("SMBus Controller - E422"))
				
				count++;
			}
			if(count == 1) return PostProcessStatus.ProcessPass;
			else return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>SMBus</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>10100202 Mouse Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="10100202" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\GetMice.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Microsoft PS/2 Mouse"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>10100102 Keyboard Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="10100102" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\keyboard.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Standard PS/2 Keyboard"))
					return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>PS2</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>05100111 Fingerprint Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="05100111" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\getBiometric.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{		
			
			foreach(string s in node.GetStdOutMsgs())
			{
				if(s.Contains("Goodix MOC Fingerprint"))
					
				return PostProcessStatus.ProcessPass;
			}
			
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>false</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Finger print(HW NA)</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Interrupt Generation</Name>
                    <Params>
                      <Param Name="StartTimeYear" Value="2019" />
                      <Param Name="StartTimeMonth" Value="8" />
                      <Param Name="StartTimeDay" Value="27" />
                      <Param Name="StartTimeHour" Value="15" />
                      <Param Name="StartTimeMinute" Value="19" />
                      <Param Name="StartTimeSecond" Value="47" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--commandline" "run=24" "tolerance=20"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\RTC\Win8TestPackage.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			List&lt;string&gt; list = node.GetStdOutMsgs();
			foreach(string s in list)
			{
				if(s.Contains("test has passed!"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>InterruptTimer</Name>
                    <Params>
                      <Param Name="StartTimeYear" Value="2014" />
                      <Param Name="StartTimeMonth" Value="4" />
                      <Param Name="StartTimeDay" Value="24" />
                      <Param Name="StartTimeHour" Value="5" />
                      <Param Name="StartTimeMinute" Value="23" />
                      <Param Name="StartTimeSecond" Value="36" />
                    </Params>
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--commandline" "run=26" "tolerance=20"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\remote_collateral\RTC\Win8TestPackage.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			List&lt;string&gt; list = node.GetStdOutMsgs();
			foreach(string s in list)
			{
				if(s.Contains("test has passed!"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>RTC</Name>
                <Params>
                  <Param Name="StartTimeYear" Value="2014" />
                  <Param Name="StartTimeMonth" Value="4" />
                  <Param Name="StartTimeDay" Value="26" />
                  <Param Name="StartTimeHour" Value="4" />
                  <Param Name="StartTimeMinute" Value="1" />
                  <Param Name="StartTimeSecond" Value="11" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>BattPrompt0</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>PLUG IN THE BATTERY CONNECTOR

插入电池（电池电量&gt;20%  ,&lt; 90%)</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Wait 4</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>9000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>4</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>11001402 Charging Test</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="11001402" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumBattery"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS") || s.Contains("Status: Charging")) 
				{
					count++;
				}
			}
	
			return (count==2) ? (PostProcessStatus.ProcessPass) : (PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>BattPrompt1</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>UNPLUG THE CHARGER

移除19v 电源</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>Wait 2</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>7000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>2</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>11001402 DisCharging test</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="11001402" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>10000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumBattery"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS") || s.Contains("BASE-BAT") || s.Contains("Status: Discharging")) 
				{
					count++;
				}
			}
	
			return (count==3) ? (PostProcessStatus.ProcessPass) : (PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ConfigurablePromptNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>BattPrompt2</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>false</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>1).PLUG IN THE CHARGER  （先插入19v 电源）
2).UNPLUG THE BATTERY CONNECTOR  （移除电池）</Message>
                    <Title>Confirmation</Title>
                    <ButtonFontSize>36</ButtonFontSize>
                    <MessageFontSize>22</MessageFontSize>
                    <Buttons>OK</Buttons>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Battery</Name>
                <Params />
                <Loops>2</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08000704 BT Scan</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08000704" />
                    </Params>
                    <Loops>5</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>25000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:BtScan"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int c = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					c++;
				}
				if (s.Contains("BT MAC:"))
				{
					c++;
				}
			}
			if (c &gt;= 1) return PostProcessStatus.ProcessPass;
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08001504 BT Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08001504" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>20000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>.\remote_collateral\EnumBT.vbs</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>c:\windows\system32\cscript.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("PNPDeviceID"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08000604 BT pair</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08000604" />
                    </Params>
                    <Loops>5</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>25000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:BtPair" "--target:PICTE-ICL-PC01"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int c = 0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS"))
				{
					c++;
				}
				if (s.Contains("BT MAC:"))
				{
					c++;
				}
			}
			if (c &gt;= 2) return PostProcessStatus.ProcessPass;
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Bluetooth</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08002103 WiFi Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08002103" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumWlan"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Intel(R) Wi-Fi 7 BE211 320MHz"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08003703 WiFi Scan</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08003703" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WlanScan"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("MAC ADDRESS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08003603 WIFI Connect</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08003603" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WlanConnect" "--ssid:ICL-U_FT" "--psw:Iloveflex" "scanPeriod:10" "timeout:12"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{   int i =0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS")) i++;
				if (s.Contains(" CONNECTION SSID: ICL-U_FT")) i++;	
				
			}
			return (i &gt;=2) ? (PostProcessStatus.ProcessPass):(PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>WiFi</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
            </Children>
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>OS Tests</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>false</CodeEnabled>
            <References />
            <GroupType>Serial</GroupType>
          </Node>
          <Node xsi:type="GroupNode">
            <Children>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>08002103 WWAN Presence</Name>
                <Params>
                  <Param Name="ErrorCode" Value="08002103" />
                </Params>
                <Loops>2</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>60000</TimeOutMs>
                <Enabled>false</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>.\remote_collateral\Network_adapter.vbs</CmdLineArgs>
                <WorkingDirectory />
                <FileName>c:\windows\system32\cscript.exe</FileName>
                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("5G Solution 5000"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="GroupNode">
                <Children>
                  <Node xsi:type="PicturePrompt">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>PicturePrompt</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>0</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <Message>Check WIFI</Message>
                    <Title>Confirmation</Title>
                    <Picture>WIFI.jpg</Picture>
                    <Font>25.8</Font>
                    <Buttons>Yes, No</Buttons>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08002103 WiFi Presence</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08002103" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:EnumWlan"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("Intel(R) Wi-Fi 7 BE211 320MHz")||s.Contains("DEVICE 1: Intel(R) Dual Band Wireless-AC 8265"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="WaitNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>WaitGroup</Name>
                    <Params />
                    <Loops>1</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>6000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <Duration>1</Duration>
                    <DurationType>Seconds</DurationType>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08003703 WiFi Scan</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08003703" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>true</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WlanScan"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("MAC ADDRESS"))
				{
					return PostProcessStatus.ProcessPass;
				}
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                  <Node xsi:type="ProcessNode">
                    <Children />
                    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                    <Name>08003603 WIFI Connect</Name>
                    <Params>
                      <Param Name="ErrorCode" Value="08003603" />
                    </Params>
                    <Loops>2</Loops>
                    <OnFail>Halt</OnFail>
                    <LoopUntilPass>true</LoopUntilPass>
                    <TimeOutMs>60000</TimeOutMs>
                    <Enabled>false</Enabled>
                    <CriticalNode>false</CriticalNode>
                    <ResultToReport>false</ResultToReport>
                    <OnRetry>RetryAlways</OnRetry>
                    <AlwaysRun>false</AlwaysRun>
                    <CmdLineArgs>"--testname:WlanConnect" "--ssid:ICL-U_FT" "--psw:Iloveflex" "scanPeriod:10" "timeout:12"</CmdLineArgs>
                    <WorkingDirectory />
                    <FileName>.\local_collateral\testlibclient.exe</FileName>
                    <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                    <PreStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PreStepReferences>
                    <EnablePreStepCode>false</EnablePreStepCode>
                    <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{   int i =0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if (s.Contains("&lt;STATUS&gt;: PASS")) i++;
				if (s.Contains(" CONNECTION SSID: ICL-U_FT")) i++;	
				
			}
			return (i &gt;=2) ? (PostProcessStatus.ProcessPass):(PostProcessStatus.ProcessFail);
		}
	}
}
</PostStepCode>
                    <PostStepReferences>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Framework.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.Plugins.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                        <Gac>false</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>mscorlib.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Data.DataSetExtensions.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Core.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                      <AsmRef>
                        <Asm>System.Xml.Linq.dll</Asm>
                        <Gac>true</Gac>
                      </AsmRef>
                    </PostStepReferences>
                    <EnablePostStepCode>true</EnablePostStepCode>
                  </Node>
                </Children>
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>WiFi</Name>
                <Params />
                <Loops>5</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>true</LoopUntilPass>
                <TimeOutMs>0</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <CodeEnabled>false</CodeEnabled>
                <References />
                <GroupType>Serial</GroupType>
              </Node>
            </Children>
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>WWAN</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>false</CodeEnabled>
            <Code>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class GroupNodePreStep
	{
		//Invoke will be executed prior to running the process node. 
		public GroupNodePreStepStatus Invoke(ExecutableNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return GroupNodePreStepStatus.RunGroup;
		}
	}
}
</Code>
            <References>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </References>
            <GroupType>Serial</GroupType>
          </Node>
          <Node xsi:type="GroupNode">
            <Children>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Hibernate</Name>
                <Params>
                  <Param Name="ErrorCode" Value="12000102" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>100000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>"/sleep" "/s:20"</CmdLineArgs>
                <WorkingDirectory />
                <FileName>.\local_collateral\pwrtest.exe</FileName>
                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("EffectiveState:    S4"))
				{count++;}
			    if(s.Contains("No.0 Transition -- Complete"))
				{count++;}
			}
			if (count==2)
			{
				return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
              <Node xsi:type="WaitNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Wait 5</Name>
                <Params />
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>10000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <Duration>5</Duration>
                <DurationType>Seconds</DurationType>
              </Node>
              <Node xsi:type="ProcessNode">
                <Children />
                <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
                <Name>Sleep</Name>
                <Params>
                  <Param Name="ErrorCode" Value="12000102" />
                </Params>
                <Loops>1</Loops>
                <OnFail>Halt</OnFail>
                <LoopUntilPass>false</LoopUntilPass>
                <TimeOutMs>100000</TimeOutMs>
                <Enabled>true</Enabled>
                <CriticalNode>false</CriticalNode>
                <ResultToReport>false</ResultToReport>
                <OnRetry>RetryAlways</OnRetry>
                <AlwaysRun>false</AlwaysRun>
                <CmdLineArgs>"/sleep" "/s:3"</CmdLineArgs>
                <WorkingDirectory />
                <FileName>.\local_collateral\pwrtest.exe</FileName>
                <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
                <PreStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PreStepReferences>
                <EnablePreStepCode>false</EnablePreStepCode>
                <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			int count=0;
			foreach (string s in node.GetStdOutMsgs())
			{
				if(s.Contains("EffectiveState:    S4"))
				{count++;}
			    if(s.Contains("No.0 Transition -- Complete"))
				{count++;}
			}
			if (count==2)
			{
				return PostProcessStatus.ProcessPass;
			}
			return PostProcessStatus.ProcessFail;
		}
	}
}
</PostStepCode>
                <PostStepReferences>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Framework.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.Plugins.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                    <Gac>false</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>mscorlib.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Data.DataSetExtensions.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Core.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                  <AsmRef>
                    <Asm>System.Xml.Linq.dll</Asm>
                    <Gac>true</Gac>
                  </AsmRef>
                </PostStepReferences>
                <EnablePostStepCode>true</EnablePostStepCode>
              </Node>
            </Children>
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>Power Management</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <CodeEnabled>false</CodeEnabled>
            <References />
            <GroupType>Serial</GroupType>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>ReleaseIP</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>true</AlwaysRun>
            <CmdLineArgs>/release</CmdLineArgs>
            <WorkingDirectory />
            <FileName>C:\Windows\System32\ipconfig</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PreProcessStatus.ExecuteProcess;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>false</EnablePreStepCode>
            <PostStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
namespace Intel.IronTester2
{
	public class PostTestStep : IPostProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PostProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			return PostProcessStatus.ProcessPass;
		}
	}
}
</PostStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>false</EnablePostStepCode>
          </Node>
          <Node xsi:type="SfcResultsNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>SFCResultNode</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Continue</OnFail>
            <LoopUntilPass>false</LoopUntilPass>
            <TimeOutMs>0</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>true</AlwaysRun>
          </Node>
          <Node xsi:type="WaitNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>WaitGroup</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>6000</TimeOutMs>
            <Enabled>true</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <Duration>1</Duration>
            <DurationType>Seconds</DurationType>
          </Node>
          <Node xsi:type="ProcessNode">
            <Children />
            <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
            <Name>If Passed then Shutdown</Name>
            <Params />
            <Loops>1</Loops>
            <OnFail>Halt</OnFail>
            <LoopUntilPass>true</LoopUntilPass>
            <TimeOutMs>10000</TimeOutMs>
            <Enabled>false</Enabled>
            <CriticalNode>false</CriticalNode>
            <ResultToReport>false</ResultToReport>
            <OnRetry>RetryAlways</OnRetry>
            <AlwaysRun>false</AlwaysRun>
            <CmdLineArgs>/s /t 3</CmdLineArgs>
            <WorkingDirectory />
            <FileName>shutdown.exe</FileName>
            <PreStepCode>using System;
using System.Collections.Generic;
using System.Linq;
using Intel.IronTester2.Sequence;
using System.IO;
using System.Xml;
using System.Xml.Linq;

namespace Intel.IronTester2
{
	public class PreTestStep : IPreProcessStep
	{
		//Invoke will be executed prior to running the process node. 
		public PreProcessStatus Invoke(IProcessNode node,  IProcessMsgRouter msgRouter)
		{
			//msgRouter.DebugOutput("example debug Message");
			int lines = 1;
			string Reocved = DateTime.Now.ToString("yyyy-MM-dd") + ".txt";
			Reocved = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory) + "\\" + Reocved;
			string SN = (node as ExecutableNode).GetRoot().GetGlobalRuntimeParam("SerialNumber").ToUpper().Trim();
			string lastSaveResult = Directory.GetCurrentDirectory() + "\\logfiles\\last_saveresult.xml";
			msgRouter.DebugOutput(lastSaveResult);
			
			XElement doc = XElement.Load(lastSaveResult);
            IEnumerable&lt;XElement&gt; product =  
                from el in doc.Descendants("DUT")
                where el.Attribute("ID").Value == SN
                select el;
            foreach (XElement el in product)
            {
            	if (File.Exists(Reocved))
            	{
            		using (var sr = new StreamReader(Reocved))
            		{
                        var ls = "";
                        while ((ls=sr.ReadLine()) != null)
                        {
                            lines++;
                        }
                    }
            	}
            	
            	using (StreamWriter sw = new StreamWriter(Reocved,true))
            	{
            		sw.WriteLine(lines.ToString() + " " + DateTime.Now.ToLongTimeString().ToString() + " " + SN + " " 
            		+ el.Attribute("STATUS").Value.ToString());
            	}
            	
                if (el.Attribute("STATUS").Value.ToString()=="Passed")
                {
                	return PreProcessStatus.ExecuteProcess;
                }
            }
			return PreProcessStatus.BypassProcessAndDone;
		}
	}
}
</PreStepCode>
            <PreStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PreStepReferences>
            <EnablePreStepCode>true</EnablePreStepCode>
            <PostStepReferences>
              <AsmRef>
                <Asm>Intel.IronTester2.Framework.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.Plugins.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>Intel.IronTester2.ShopFloor.dll</Asm>
                <Gac>false</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>mscorlib.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Data.DataSetExtensions.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Core.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
              <AsmRef>
                <Asm>System.Xml.Linq.dll</Asm>
                <Gac>true</Gac>
              </AsmRef>
            </PostStepReferences>
            <EnablePostStepCode>false</EnablePostStepCode>
          </Node>
        </Children>
        <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
        <Name>Test Group</Name>
        <Params />
        <Loops>1</Loops>
        <OnFail>Halt</OnFail>
        <LoopUntilPass>true</LoopUntilPass>
        <TimeOutMs>0</TimeOutMs>
        <Enabled>true</Enabled>
        <CriticalNode>false</CriticalNode>
        <ResultToReport>false</ResultToReport>
        <OnRetry>RetryAlways</OnRetry>
        <CodeEnabled>false</CodeEnabled>
        <References />
        <GroupType>Serial</GroupType>
      </Node>
    </Children>
    <IsGroupNodeCodeEnable>false</IsGroupNodeCodeEnable>
    <Name>Board Functional Test</Name>
    <Params>
      <Param Name="SPK" Value="Speakers (2- SoundWire Audio)" />
      <Param Name="DMIC" Value="Microphone Array (Intelr Smart Sound Technology for Digital Microphones)" />
      <Param Name="SERIAL_NUMBER" Value="PKWC52900019" />
      <Param Name="SUCCESS" Value="TRUE" />
      <Param Name="ITEM" Value="PUT_IPN_HERE" />
      <Param Name="PRODUCTNAME" Value="PUT PRODUCTNAME HERE" />
      <Param Name="BUILDNUMBER" Value="PUT BUILDNUMBER HERE" />
      <Param Name="0CPTD_IMEI_COYMTMB1" Value="004402521290167" />
      <Param Name="EP" Value="Telephone" />
      <Param Name="Orient" Value="Orientation Sensor" />
      <Param Name="BIOSVersion" Value="INTEL  - 20170001,ICLSFWR1.R00.2392.A04.1809260455,Intel - 10000" />
      <Param Name="ECMajor" Value="EmbeddedControllerMajorVersion: 1" />
      <Param Name="ECMinor" Value="EmbeddedControllerMinorVersion: 19" />
      <Param Name="CPUStepping" Value="Caption: Intel64 Family 6 Model 142 Stepping 11" />
      <Param Name="CPUBrandName" Value="Genuine Intel(R) CPU 0000 @ 1.60GHz" />
      <Param Name="CPUCoreCount" Value="NumberOfCores: 4" />
      <Param Name="CPUMaxSpeed" Value="MaxClockSpeed: 1992" />
      <Param Name="MemSize" Value="4294967296" />
      <Param Name="MemManufacturer" Value="Samsung" />
      <Param Name="MemSpeed" Value="2667" />
      <Param Name="MemDevices" Value="1" />
      <Param Name="MemFormFactor" Value="SODIMM" />
      <Param Name="MEID" Value="PCI\VEN_8086&amp;DEV_9D3A" />
      <Param Name="MEVersion" Value="11.0.0.1172" />
      <Param Name="BTUSBDevid" Value="USB\VID_8087&amp;PID_0026\5&amp;28103CCD&amp;0&amp;14" />
      <Param Name="VOLUME" Value="0" />
      <Param Name="UFCAM1" Value="Intel(R) RealSense(TM) 3D Camera Virtual Driver" />
      <Param Name="HSSPK" Value="Headphones (Realtek High Definition Audio(SST))" />
      <Param Name="STYLUS_LENOVO" Value="2" />
      <Param Name="STYLUS_CNL_SDS" Value="19" />
      <Param Name="VideoMemory" Value="1073741824" />
      <Param Name="PCI_MAP" Value="cnl_sds_z0_pci.txt" />
      <Param Name="STYLUS_CNL_SDS_BUTTON" Value="20" />
      <Param Name="STATION_ID" Value="74" />
      <Param Name="PRODUCT_CODE" Value="MAKL2KCCB" />
      <Param Name="OPERATION" Value="FS1" />
      <Param Name="USER_ID" Value="AUTOTEST*A" />
      <Param Name="StationID" Value="BFT01_FAT3B" />
      <Param Name="LineID" Value="PIC-SMT-FAT3B" />
      <Param Name="PartNumber" Value="J94407-202" />
      <Param Name="SerialNumber" Value="FZIC834000AD" />
      <Param Name="ProductionOrder" Value="IPIC183501" />
      <Param Name="FATSN" Value="Value_cannot_be_calculated" />
      <Param Name="IMEI" Value="00000000000000" />
      <Param Name="IntelSection" Value="" />
      <Param Name="FoundPort" Value="COM1" />
      <Param Name="MAC address" Value="9049FA041111" />
      <Param Name="PNP_SATA" />
      <Param Name="FoundPort0" Value="COM3" />
      <Param Name="Accel" Value="Physical Accelerometer" />
      <Param Name="Gyro" Value="Physical Gyrometer" />
      <Param Name="Mag" Value=" Magnetometer" />
      <Param Name="Als" Value="Ambient Light" />
      <Param Name="Hall" Value="Hall Presence" />
      <Param Name="Orient" Value="fc96dfb2-48ac-4c0d-be00-a03a60819412" />
      <Param Name="Sar" Value="Physical Sar" />
      <Param Name="Accel2" Value="Calibrated Accelerometer" />
      <Param Name="AAPart" Value="Value_cannot_be_calculated" />
      <Param Name="MAC1" Value="9049FA0502F3" />
      <Param Name="USBDrive1" Value="" />
      <Param Name="USBDriveType1" Value="" />
      <Param Name="USBDrive2" Value="" />
      <Param Name="USBDriveType2" Value="" />
      <Param Name="USBDrive3" Value="" />
      <Param Name="USBDriveType3" Value="" />
      <Param Name="USBDrive4" Value="" />
      <Param Name="USBDriveType4" Value="" />
      <Param Name="USBDriveInfoCount" Value="0" />
      <Param Name="USBDriveSN1" Value="2119INTEL11000001276" />
      <Param Name="USBDriveSN2" Value="03001515011325211453" />
      <Param Name="USBDriveSN3" Value="03004021120522111847" />
      <Param Name="USBDriveSN4" Value="2119INTEL11000001287" />
      <Param Name="USBDriveSN5" Value="03003420061622050157" />
      <Param Name="USBDriveSN6" Value="2119INTEL11000001317" />
      <Param Name="USBDriveSN7" Value="2119INTEL11000001282" />
      <Param Name="PDHex" Value="C:\Users\HAMZAHMU\Desktop\IT\local_collateral\CYPDVerify\firmware\CYPD5225-96BZXI_notebook_tgl_v1.1.0.hex" />
      <Param Name="SCSIDrive 1" />
      <Param Name="SCSIDrive 3" />
      <Param Name="SCSIDriveType 3" />
      <Param Name="SCSIDrive 4" />
      <Param Name="SCSIDriveType 4" />
      <Param Name="SERIAL_NUMBER" Value="GGAD042000ML" />
      <Param Name="FILENAME" Value="BLTFRU.INI" />
      <Param Name="PSS_COMPORT" Value="COM4" />
      <Param Name="LearnPCIEMap1" Value="PCI_BUS_5:Standard NVM Express Controller" />
      <Param Name="LearnPCIEMap2" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E50" />
      <Param Name="LearnPCIEMap3" Value="PCI_BUS_0:Intel(R) SMBus - 7E22" />
      <Param Name="LearnPCIEMap4" Value="PCI_BUS_0:Intel(R) Arc(TM) Graphics" />
      <Param Name="LearnPCIEMap5" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap6" Value="PCI_BUS_0:Intel(R) Innovation Platform Framework Processor Participant" />
      <Param Name="LearnPCIEMap7" Value="PCI_BUS_0:USB4(TM) Host Router (Microsoft)" />
      <Param Name="LearnPCIEMap8" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E7B" />
      <Param Name="LearnPCIEMap9" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap10" Value="PCI_BUS_0:Intel(R) Ethernet Connection (18) I219-V" />
      <Param Name="LearnPCIEMap11" Value="PCI_BUS_0:Intel(R) Movidius(TM) VPU" />
      <Param Name="LearnPCIEMap12" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap13" Value="PCI_BUS_0:Intel(R) Imaging Signal Processor" />
      <Param Name="LearnPCIEMap14" Value="PCI_BUS_0:Intelr Smart Sound Technology BUS" />
      <Param Name="LearnPCIEMap15" Value="PCI_BUS_0:Intel(R) USB 3.20 eXtensible Host Controller - 1.20 (Microsoft)" />
      <Param Name="LearnPCIEMap16" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap17" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E79" />
      <Param Name="LearnPCIEMap18" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E7A" />
      <Param Name="LearnPCIEMap19" Value="PCI_BUS_0:Intel(R) GNA Scoring Accelerator module" />
      <Param Name="LearnPCIEMap20" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap21" Value="PCI_BUS_0:PCI standard ISA bridge" />
      <Param Name="LearnPCIEMap22" Value="PCI_BUS_0:Intel(R) Precise Touch and Stylus (Intel(R) PTS) - Base Driver - Port #1" />
      <Param Name="LearnPCIEMap23" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E51" />
      <Param Name="LearnPCIEMap24" Value="PCI_BUS_0:Intel(R) SPI - 7E23" />
      <Param Name="LearnPCIEMap25" Value="PCI_BUS_0:Intel(R) Shared SRAM - 7E7F" />
      <Param Name="LearnPCIEMap26" Value="PCI_BUS_0:Intel(R) Integrated Sensor Solution" />
      <Param Name="LearnPCIEMap27" Value="PCI_BUS_0:Intel(R) USB 3.20 eXtensible Host Controller - 1.20 (Microsoft)" />
      <Param Name="LearnPCIEMap28" Value="PCI_BUS_0:Intel(R) Management Engine Interface #1" />
      <Param Name="LearnPCIEMap29" Value="PCI_BUS_0:PCI standard host CPU bridge" />
      <Param Name="LearnPCIEMap30" Value="PCI_BUS_0:Intel(R) Serial IO I2C Host Controller - 7E78" />
      <Param Name="LearnPCIEMap31" Value="PCI_BUS_0:USB4(TM) Host Router (Microsoft)" />
      <Param Name="LearnPCIEMap32" Value="PCI_BUS_0:PCI Express Root Port" />
      <Param Name="LearnPCIEMap33" Value="PCI_BUS_2:PCI Express Downstream Switch Port" />
      <Param Name="LearnPCIEMap34" Value="PCI_BUS_2:PCI Express Downstream Switch Port" />
      <Param Name="LearnPCIEMap35" Value="PCI_BUS_1:PCI Express Upstream Switch Port" />
      <Param Name="LearnPCIEMapCount" Value="35" />
      <Param Name="NVME-DriveType1" Value="Fixed hard disk media" />
      <Param Name="NVME-Drive1" Value="SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000000" />
      <Param Name="SCSIDriveType5" Value="External hard disk media" />
      <Param Name="SCSIDrive5" Value="" />
      <Param Name="SCSIDriveType6" Value="External hard disk media" />
      <Param Name="SCSIDrive6" Value="" />
      <Param Name="SCSIDriveType7" Value="External hard disk media" />
      <Param Name="SCSIDrive7" Value="" />
      <Param Name="BIO" Value="Biometric Presence" />
      <Param Name="SCSIDrive4" />
      <Param Name="SCSIDriveType4" Value="External hard disk media" />
      <Param Name="SCSIDrive3" Value="" />
      <Param Name="SCSIDriveType3" Value="" />
      <Param Name="SCSIDrive2" Value="" />
      <Param Name="SCSIDriveType2" Value="" />
      <Param Name="SCSIDrive1" Value="" />
      <Param Name="SCSIDriveType1" Value="" />
      <Param Name="T7-DriveType1" Value="Fixed hard disk media" />
      <Param Name="T7-Drive1" Value="SCSI\DISK&amp;VEN_NVME&amp;PROD_SAMSUNG_MZVL2512\5&amp;298990DB&amp;0&amp;000000" />
      <Param Name="T7-DriveType2" Value="External hard disk media" />
      <Param Name="T7-Drive2" Value="SCSI\DISK&amp;VEN_SAMSUNG&amp;PROD_PSSD_T7\6&amp;1249323A&amp;0&amp;000000" />
      <Param Name="T7-DriveType3" Value="External hard disk media" />
      <Param Name="T7-Drive3" Value="SCSI\DISK&amp;VEN_SAMSUNG&amp;PROD_PSSD_T7\6&amp;D7DB87&amp;0&amp;000000" />
      <Param Name="No Name" />
      <Param Name="NVME-Drive2" Value="SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000002" />
      <Param Name="NVME-DriveType2" Value="Fixed hard disk media" />
      <Param Name="NVME-Drive3" Value="SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000001" />
      <Param Name="NVME-DriveType3" Value="Fixed hard disk media" />
      <Param Name="NVME-Drive1" Value="SCSI\DISK&amp;VEN_SKHYNIX&amp;PROD_HN8T15DEHKX075\4&amp;E2F5AAC&amp;0&amp;000000 " />
      <Param Name="NVME-DriveType1" Value="Fixed hard disk media" />
      <Param Name="T7-Drive4" Value="SCSI\DISK&amp;VEN_SAMSUNG&amp;PROD_PSSD_T7\7&amp;86A1D73&amp;0&amp;000000" />
      <Param Name="T7-DriveType4" Value="External hard disk media" />
      <Param Name="USBDrive5" Value="" />
      <Param Name="USBDriveType5" Value="" />
      <Param Name="USBDrive6" Value="" />
      <Param Name="USBDriveType6" Value="" />
      <Param Name="USBDrive7" Value="" />
      <Param Name="USBDriveType7" Value="" />
    </Params>
    <Loops>1</Loops>
    <OnFail>Halt</OnFail>
    <LoopUntilPass>false</LoopUntilPass>
    <TimeOutMs>0</TimeOutMs>
    <Enabled>true</Enabled>
    <CriticalNode>false</CriticalNode>
    <ResultToReport>false</ResultToReport>
    <OnRetry>RetryAlways</OnRetry>
    <CodeEnabled>false</CodeEnabled>
    <References />
    <GroupType>Serial</GroupType>
  </Root>
</Sequence>